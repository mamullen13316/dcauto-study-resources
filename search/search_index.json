{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cisco DCAUTO Exam Study Resources","text":""},{"location":"#about","title":"About","text":"<p> We have many people to thank for helping us pass the Cisco DCAUTO exam, by way of using their open source contributions, blogs, and posts on StackOverflow.  We have never met any of those people and likely never will, in-person or otherwise.  Each of these people took time from their lives to publish something they knew or built, so the rest of us, somehow, via some search engine, could have even a slightly more straightforward path to whatever it is we want to learn.</p> <p> To everyone who took the time to help the entire DevNet community, this guide is both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view.  It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people who follow.  We wish you success in your climb.</p>"},{"location":"#overview","title":"Overview","text":"<p> This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam.  All of the information in this guide is a curation of resources that the authors used to study for and pass the Cisco DCAUTO exam.</p> <p>Attention</p> <p>All content in this guide strictly complies with the Cisco Certification and Confidentiality Agreement, also known as the Cisco Certification Non-Disclosure Agreement (NDA).  We welcome and appreciate any Cisco NDA-compliant contributions from the community.</p> <p>Info</p> <ul> <li>This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet.</li> <li>All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates.</li> <li>Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind.<ul> <li>We pay for these resources just like anyone else would, and we recommend the paid resources because we think they are valuable.</li> </ul> </li> </ul>"},{"location":"#exam-topics","title":"Exam Topics","text":"<p> The Cisco DCAUTO exam topics cover a variety of skills.  Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.), while others are product-agnostic, foundational infrastructure automation and programmability skills (Git, Python, Ansible, etc.).</p> <p> DCAUTO is the fourth DevNet exam that we've studied for and the first where we struggled to find a curated set of resources from which to study.  As we amassed notes, links, and our own code snippets, we organized everything into categories corresponding to the four sections in the Exam Topics list, so there is no ambiguity about finding the resources you need.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p> For us, liftoff is the hardest part of the study process.  Getting our computers set up in a way that allows us to study and take notes always seems to take way more time than we think it will.  To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible.</p> <p> We think the best way to study for the DCAUTO exam is to have a great development environment, so we packaged one into the GitHub repository that supports this site.  The content of the study materials doesn't change whether you use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment.  These are the developer tools that we recommend to get started with your DCAUTO exam study:</p> <ol> <li> <p> An account registration with Cisco DevNet.</p> <p>Tip</p> <p>If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account.</p> </li> <li> <p> A Windows or macOS computer with the following software installed:</p> <ul> <li> Docker Desktop.</li> <li> Git SCM from Git-SCM or from a Windows or macOS package manager.</li> <li> Visual Studio Code.</li> <li> Cisco AnyConnect or OpenConnect VPN client.</li> <li> A desktop hypervisor (Parallels, VirtualBox, VMware Fusion, or VMware Workstation Player).</li> </ul> <p>Tip</p> <p>A desktop hypervisor is optional.  We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms.</p> </li> <li> <p> Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.).</p> <p>Tip</p> <p>In our examples, we use a combination of the Visual Studio Code Integrated Terminal, PowerShell and the macOS Terminal application.</p> </li> </ol>"},{"location":"#topic-navigation","title":"Topic Navigation","text":"Development Environment Setup <ul> <li>Visual Studio Code Dev Container</li> </ul> Section 1.0 - Network Programmability Foundation <ul> <li>Section 1.0 - Network Programmability Foundation</li> </ul> Section 2.0 - Controller Based Data Center Networking <ul> <li>Section 2.0 - Controller Based Data Center Networking</li> </ul> Section 3.0 - Data Center Device-Centric Networking <ul> <li>Section 3.0 - Data Center Device-Centric Networking</li> </ul> Section 4.0 - Data Center Compute <ul> <li>Section 4.0 - Data Center Compute</li> </ul> Appendix <ul> <li>Appendix A - Lessons Learned</li> <li>Appendix B - JupyterLab Overview</li> </ul>"},{"location":"#lets-do-this","title":"Let's Do This","text":"<p> You're already to get started! Click this link to setup your development environment.</p>"},{"location":"sections/appendix_a/","title":"Appendix A","text":""},{"location":"sections/appendix_a/#lessons-learned","title":"Lessons Learned","text":""},{"location":"sections/appendix_a/#know-devasc-exam-topics-well","title":"Know DEVASC Exam Topics Well","text":"<p> Success with the product-specific exam topics rely on the skills you develop during study for the Cisco DevNet Associate Exam.  The DevNet Associate exam topics have many similarities with Section 1.0 of the DCAUTO exam topics.  If you get comfortable with these foundational topics, you will have a much easier time studying the product-specific topics.</p>"},{"location":"sections/appendix_a/#pay-attention-to-taxonomy","title":"Pay Attention to Taxonomy","text":"<p> Pay close attention to the taxonomy of each exam topic, to focus your study energy in the right place.  For example, if an exam topic has the taxonomy \"Describe...\" versus \"Construct...,\" you should probably spend more time reading about the \"Describe\" topic and more hands-on time with the \"Construct\" topic.  This technique helps maximize the time you spend studying.</p>"},{"location":"sections/appendix_a/#study-with-someone-else","title":"Study With Someone Else","text":"<p> Another point-of-view can go a long way to drive a deeper understanding of each exam topic.  When you study with someone else or with a group, each person will problem-solve differently.  All of these approaches allow you to share great resources or even nuggets of information that can help you make sense of something you aren't sure about, didn't understand as well as you thought you did, or even help you realize you overlooked something in your study plan.</p> <p>Studying with someone else has another great benefit...it keeps you accountable.  We found we were far more likely to commit time to learn something or set up a lab resource when we knew someone else counted on us.  There's also a healthy element of peer pressure that will help you avoid the trap of distractions, which could derail your study plan.</p>"},{"location":"sections/appendix_a/#pre-identify-all-of-your-hands-on-study-resources","title":"Pre-Identify All of your Hands-On Study Resources","text":"<p> Tracking down resources can consume an excessive amount of your study time without providing much of a benefit.  While tempting, try to avoid diving right into topic study until you know which resources you plan to use for, at a minimum, a complete section and, at best, all of the exam topics.</p>"},{"location":"sections/appendix_a/#change-study-topicssections-frequently","title":"Change Study Topics/Sections Frequently","text":"<p> Sections 2.0 (ACI), 3.0 (NX-OS), and 4.0 (UCS) each have very specific product focuses.  A technique that helps us a lot is to focus 80% of our study time on one of these sections at a time and to also dedicate the other 20% to the other two topics.  Why?  Because it can be all-consuming to study for each of these sections! For example, it's frustrating and a waste of time to spend two or three weeks on Section 2.0, move to Section 3.0 and do the same thing, only to struggle to remember much of the Section 2.0 content by the end of your Section 3.0 study.</p> <p>Instead, using the same example, study all of the Section 2.0 topics, move to Section 3.0, and set time aside while you study Section 3.0 topics, just to review your Section 2.0 notes or refresh your hands-on skills.  You will retain information better this way and this practice will help you to better distinguish between the product-specific Python or SDK syntax, which has some similarities between products.  That can be particularly helpful when you take an exam.</p>"},{"location":"sections/appendix_a/#reverse-plan-a-study-schedule","title":"Reverse Plan a Study Schedule","text":"<p> When you schedule an exam, start planning a study schedule backward from that date, and give yourself plenty of extra time in case you need it.  This strategy can help accomplish two things:</p> <ol> <li>Keep you from procrastinating...and then stressfully cramming.</li> <li>Help you resist the temptation to reschedule your exam to a later date.</li> </ol> <p>This is definitely a \"slow down to speed up\" approach to study planning and the up-front time investment will save you a lot of stress and help you stay disciplined about your test preparation focus.</p>"},{"location":"sections/appendix_a/#avoid-taking-shortcuts","title":"Avoid Taking Shortcuts","text":"<p> We strictly avoided any exam prep materials that compromise the integrity of the exam.  We all know the ethics around those sorts of things, so there's no need to go into those details.  From a purely practical point of view, you simply don't need that stuff.  After having passed the DCAUTO exam, we are confident in saying that if you stick to the exam topics, you will learn the things that you need to know.</p>"},{"location":"sections/appendix_a/#treat-failure-as-shameless-learning","title":"Treat Failure as Shameless Learning","text":"<p> Between us, we've failed A LOT of Cisco exams.  We used to think a failed exam was a badge of shame, although, over many years, we learned that failing an exam is just a checkpoint on your certification journey.  Sometimes life's changing circumstances don't allow you to study as much as you would like.  We all learn different things at different paces, so don't kick yourself if someone you study with passes an exam before you or passes when you fail.</p> <p>Neither of us have deep backgrounds in ACI, NX-OS, or UCS, so we approached our first attempt at the DCAUTO exam, intending to learn where our knowledge gaps are so that we could regroup for another try.  In our specific case, after completing the exam, we both just happened to feel like we over-prepared a bit (which is not a complaint), and we were fortunate to pass on our first attempt.  Going into the exam without extreme self-pressure to \"do or die\" allowed us to focus our study energy on learning instead of on simply passing the exam.  We passed the exam as a result of our learning which feels pretty good...much better than it would feel to pass the exam and feel like we didn't learn anything.</p>"},{"location":"sections/appendix_b/","title":"Appendix A","text":""},{"location":"sections/appendix_b/#jupyterlab-overview","title":"JupyterLab Overview","text":"<p>Project Jupyter creates open-source software that helps people work with different programming languages interactively through a web browser, and JupyterLab is the Jupyter web interface.  Think of JupyterLab sort of like a web-based Python IDE that allows you to write and step through code one block at a time, while also allowing you to document your work using markdown.</p> <p>Many of the hands-on exercises in this repository use JupyterLab because we found that JupyterLab is a great way to work through our code development in small, repeatable steps, visualize an entire automated workflow, and provide inline documentation that make our study materials reusable.</p> <p>If you use the development environments included in this repository, all you need to know before you can use JupyterLab is:</p> <ol> <li>The JupyterLab server starts automatically when you bring the development environment container online.</li> <li>You can connect to the JupyterLab server by navigating to http://localhost:8888.</li> <li>Any file in the repository with an .ipynb extension is an interactive Jupyter Notebook that you can open in JupyterLab.</li> <li>You can open other file types in JupyterLab, including text files, images, etc., for viewing.</li> </ol>"},{"location":"sections/appendix_b/#more-information","title":"More Information","text":"<p>Our experience is, most people find JupyterLab to be intuitive and simple to use.  If you are new to JupyterLab, have questions about the UI, or if you just want more information, the JupyterLab User Guide provides a short yet helpful introduction.  The JupyterLab user guide has descriptions of JupyterLab interface elements, short video demonstrations, keyboard shortcut help, answers to common questions, and much more.</p>"},{"location":"sections/section_0/","title":"Development Environment Setup","text":""},{"location":"sections/section_0/#overview","title":"Overview","text":"<p> In case you're wondering, \"Why do I need a development environment?  I'm studying for an exam, right?\"  In our opinion, this is an exam for operations developers and a developer needs the right tools to do their job well.  Because the exam topics cover so many subjects, the array of tools, software packages, etc., is big enough that putting together an effective development environment, even if only for exam study, takes a lot of time.  We want you to save that time and help you get into the study materials as quickly as possible.</p>"},{"location":"sections/section_0/#vs-code-dev-container","title":"VS Code Dev Container","text":"<p> Our development environment uses the Development Container feature in Visual Studio Code.  The reasons we use this particular environment are:</p> <ul> <li> Consistency: this development environment will work in the same way on any computer with Visual Studio Code and Docker installed.</li> <li> Portability: the development environment is part of the Git repository which supports this guide, so simply cloning the repository means you have all of the files you need.</li> <li> Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study.</li> </ul> Development Environment Contents Reference Local web servers <ul> <li> MkDocs at http://localhost:8000 - for offline documentation access.</li> <li> JupyterLab at http://localhost:8888 - for Python code walk-through exercises.</li> </ul> Container OS packages <ul> <li> Git - to work with local or remote repositories.</li> </ul> Core Python packages <ul> <li>ipython - enhanced interactive Python shell.</li> <li>ncclient - NETCONF client for Python.</li> <li>pyyaml - YAML data encoding and decoding for Python.</li> <li>requests - Simple HTTP API interactions in Python.</li> <li>xmltodict - XML Data encoding and decoding for Python.</li> </ul> Python linting tools <ul> <li>ansible-lint - Lint YAML files for Ansible.</li> <li>autopep8 - Automatic Python PEP 8 style formatting.</li> <li>flake8 - Lint Python files for PEP 8 compliance.</li> <li>yamllint - Lint YAML files.</li> </ul> Product-specific SDKs and tools <ul> <li> Ansible - Automation tool for exam topic products.</li> <li> Cisco ACI Python SDK (Cobra) - simplified Python interaction for Cisco ACI.</li> <li> Cisco gNMI Python package - gNMI client for Python.</li> <li> Cisco UCS Manager Python SDK - simplified Python interaction for Cisco UCS Manager.</li> </ul> Product-specific Ansible Collections <ul> <li> Cisco ACI Ansible Collection</li> <li> Cisco Intersight Ansible Collection</li> <li> Cisco NX-OS (Nexus) Ansible Collection</li> <li> Cisco UCS Ansible Collection</li> </ul> Microsoft PowerShell development environment <ul> <li> PowerShell for Linux</li> <li> Cisco UCS PowerTool on PowerShell Gallery<ul> <li> Source/credit for PowerShell launch script </li> </ul> </li> </ul>"},{"location":"sections/section_0/#dev-environment-setup","title":"Dev Environment Setup","text":"<p>The setup process takes a little bit of work on the first pass.  Afterward, the setup and teardown are quick and easy.  Here are the high-level steps to set up the development environment:</p> <p>Tip</p> <p>Click to expand each step.</p> 1. Install Desktop Software <ol> <li>  Choose a Windows or macOS computer</li> <li> Install Docker Desktop</li> <li> Install Git SCM</li> <li> Install Visual Studio Code</li> <li> Install Cisco AnyConnect or OpenConnect VPN</li> <li> *Optional - Install a Desktop Hypervisor (recommendations)</li> </ol> 2. Clone the DCAUTO Study Resources Git Repository <ol> <li> Open the Visual Studio Code Integrated Terminal or the terminal shell of your choice.</li> <li> Navigate to the directory where you will clone the Git repository.</li> <li> <p> Enter the following command:</p> <pre><code># Clone the repository\ngit clone https://github.com/wwt/dcauto-study-resources.git\n</code></pre> </li> </ol> 3. Setup Visual Studio Code <ol> <li> Start Docker Desktop</li> <li> Launch Visual Studio Code</li> <li> <p> Install the Visual Studio Code Remote Development Extension</p> 3a. Copy the Remote Development Bundle extension name to your clipboard: <pre><code>ms-vscode-remote.vscode-remote-extensionpack\n</code></pre> 3b. Install the Visual Studio Code Remote Development Bundle: <p></p> 3c. Verify the Remote Development Bundle installation: <p></p> 3d. Reopen the current workspace in a Visual Studio Code Development Container: <p></p> <p></p> </li> </ol> 4. Observe Development Container Activation <ol> <li> <p> Wait for Development Container Activation</p> 1a. Click \"show log\" to monitor container activation: <p></p> 1b. Observe the development container build process: <p>Attention</p> <p>The initial development container build may take 5-10 minutes; please be patient.  Subsequent launches should only take a few seconds.</p> <p></p> </li> <li> <p> Verify Development Container Activation</p> 2a. Observe the repository files reappear and the log message scrolling stop: <p></p> </li> </ol> 5. Use the Development Environment <ol> <li> <p> Open the \"resources\" Folder</p> 1a. Study materials, code samples, references, etc. are here: <p></p> </li> <li> <p> Use the Visual Studio Code Integrated Terminal</p> 2a. Use the terminal controls pallet to open new shells: <p></p> 2b. Use terminal tabs to switch between or close any open terminals: <p></p> </li> </ol> 6. Teardown and Re-Launch <ol> <li> <p>:fontawesome-solid-window-close: Teardown the Development Environment</p> 1a. Close the Dev Container, Without Deleting the Dev Environment Image: <p></p> </li> <li> <p> Re-Launch the Development Environment</p> 2a. Quickly Restart the Dev Container From the Welcome Screen: <p></p> </li> </ol>"},{"location":"sections/section_0/#now-youre-ready","title":"Now You're Ready","text":"<p> Your development environment is ready to go and that means it's time to get to the exam topics. Click this link to check out Section 1.0 exam topics and resources.</p>"},{"location":"sections/section_1/","title":"Network Programmability Foundation","text":""},{"location":"sections/section_1/#overview","title":"Overview","text":"<p>This section of the exam topics focuses on the skills you will want to be very comfortable with before effectively studying for the remaining product-specific exam topics (in sections 2.0, 3.0, and 4.0).</p> <p>During our exam preparation we didn't spend a ton of dedicated time on the topics in this section because:</p> <ul> <li>These particular topics are pretty familiar to us from previous DevNet exam study work (DEVASC, ENAUTO, &amp; DEVCOR)</li> <li>We help teach these topics in our free, ongoing, open-to-the-public DevNet Study Group meetings.</li> <li>We work with many of the topics daily.</li> </ul> <p>We do, however, remember exactly how we felt when these topics were new to us, and we have plenty of resources to share.  Also, we included some general Ansible references that we found helpful in this section, since the exam topics in each of the subsequent sections have an Ansible automation element.</p> Section 1.0 Topic Details <ul> <li>1.1 Utilize common version control operations with git: add, clone, push, commit, diff, branching, merging conflict</li> <li>1.2 Describe characteristics of API styles (REST and RPC)</li> <li>1.3 Describe the challenges encountered and patterns used when consuming APIs synchronously and asynchronously</li> <li>1.4 Interpret Python scripts containing data types, functions, classes, conditions, and looping</li> <li>1.5 Describe the benefits of Python virtual environments</li> <li>1.6 Explain the benefits of using network configuration tools such as Ansible and Puppet for automating data center platforms</li> </ul>"},{"location":"sections/section_1/#resources","title":"Resources","text":""},{"location":"sections/section_1/#cisco-devnet","title":"Cisco DevNet","text":"Learning Labs <ul> <li>Introduction to DevNet Learning Path<ul> <li>Programming Fundamentals Module - All Labs</li> <li>REST API Fundamentals Module - All Labs</li> </ul> </li> </ul>"},{"location":"sections/section_1/#videos-on-demand","title":"Videos on Demand","text":""},{"location":"sections/section_1/#wwt-digital-platform","title":"WWT Digital Platform","text":"Individual Topics <ul> <li>Version Control 101</li> </ul>"},{"location":"sections/section_1/#pluralsight","title":"Pluralsight","text":"Cisco Certified DevNet Associate Certification Path <ul> <li>Introduction to the Cisco Certified DevNet Associate Certification</li> <li>Getting Started with Software Development Using Cisco DevNet</li> <li>Managing Cisco Networks via Infrastructure as Code</li> </ul> Individual Courses <ul> <li>Provisioning and Managing Networks Using Common Automation Tools</li> </ul>"},{"location":"sections/section_1/#hands-on-learning","title":"Hands-On Learning","text":"Guided Walkthroughs <ul> <li>WWT Git Foundations Git Repository</li> <li>WWT Docker Foundations Git Repository</li> </ul> Hands-On Labs <ul> <li>WWT Programmability Foundations Lab</li> </ul> Practice Tools <ul> <li>Git Visualizer</li> </ul>"},{"location":"sections/section_1/#documentation","title":"Documentation","text":"Code Formatting <ul> <li>Code Beautifier Tool for JSON, XML, YAML, etc.</li> </ul> Python <ul> <li>RealPython Virtual Environments Primer</li> <li>RealPython Working With JSON Data in Python</li> </ul> Ansible <ul> <li>Ansible Configuration Files</li> <li>Ansible Inventory</li> <li>Ansible Variables</li> </ul>"},{"location":"sections/section_1/#insights","title":"Insights","text":"<ul> <li> <p>Force yourself to use the skills you learn in this section frequently as you study the remaining exam topic sections.  Lots of repetition will help you build and retain these skills, and we think it is essential that these skills be second nature to you as you prepare for a certification exam.</p> </li> <li> <p>The Cisco DevNet learning labs and WWT guided walk-through exercises are excellent, repeatable learning tools that present content to you in small chunks.  You can repeat any or all of this content as many times as you like.</p> </li> <li> <p>Our favorite resource to learn this material is Pluralsight.  The author of the courses we recommend, Nick Russo, does an absolutely fantastic job of explaining core concepts in a way that we could easily consume.  Yes, Pluralsight is a paid resource and we have our own subscriptions.  In our opinion, the monthly cost is well worth the price.</p> </li> </ul>"},{"location":"sections/section_1/#on-to-section-20","title":"On to Section 2.0","text":"<p>  Nice work on the foundational topics!  Keep up the good work and click this link to check out Section 2.0 exam topics and resources.</p>"},{"location":"sections/section_2/","title":"Controller Based Data Center Networking","text":""},{"location":"sections/section_2/#overview","title":"Overview","text":"<p>This section of the exam topics focuses on working with Cisco ACI programmatically.  It is essential to be familiar with ACI's building blocks, specifically the ACI Policy Object Model, to effectively construct and parse its API payloads.</p> Section 2.0 Topic Details <ul> <li>2.1 Describe the following:<ul> <li>2.1.a ACI target policy</li> <li>2.1.b ACI application hosting capabilities</li> <li>2.1.c Implementation of an ACI application from the Cisco ACI Apps Center</li> </ul> </li> <li>2.2 Leverage the API inspector to explore the REST API calls made by the ACI GUI</li> <li>2.3 Construct a Python script to create an application policy using the ACI REST API</li> <li>2.4 Construct a Python script to create an application policy using the ACI Cobra SDK</li> <li>2.5 Construct an Ansible playbook to create an application policy</li> <li>2.6 Describe the benefits of integrating Kubernetes infrastructure using the ACI CNI plugin</li> </ul>"},{"location":"sections/section_2/#resources","title":"Resources","text":""},{"location":"sections/section_2/#cisco-devnet","title":"Cisco DevNet","text":"Learning Labs <ul> <li>ACI Programmability<ul> <li>Introduction to ACI Programmability Module - All Labs</li> <li>Intermediate ACI Programmability Module - All Labs</li> <li>Introduction to ACI and Ansible Module -  All Labs</li> </ul> </li> </ul>"},{"location":"sections/section_2/#videos-on-demand","title":"Videos on Demand","text":""},{"location":"sections/section_2/#pluralsight","title":"Pluralsight","text":"Individual Courses <ul> <li>Cisco Data Center Core: Implementing Automation</li> </ul>"},{"location":"sections/section_2/#cisco-youtube","title":"Cisco YouTube","text":"Cisco Live <ul> <li>Mastering ACI Programmability and Automating Common DC Tasks</li> </ul> NetDevOps Live <ul> <li>Exploring the ACI networking plugin for Kubernetes</li> </ul>"},{"location":"sections/section_2/#hands-on-learning","title":"Hands-On Learning","text":"DevNet Sandbox Labs <ul> <li>DevNet Always-On ACI Sandbox<ul> <li>Sandbox Access Instructions</li> </ul> </li> </ul> Development Environment Resources <p>Attention</p> <ul> <li>The links below require that the local JupyterLab server is active and listening on http://localhost:8888<ul> <li>The Visual Studio Code Development Environment automatically activates the JupyterLab server.</li> </ul> </li> </ul> <p>New to JupyterLab? Click Here for an Overview</p> <p>Tip</p> <ul> <li>You may also use Visual Studio Code to explore the same code samples and hands-on exercises.  The resources folder within the Development Environment Container contains all of the source files.</li> </ul> <ul> <li> Ansible Files<ul> <li>Sample Configuration File</li> <li>Sample Playbook 1</li> <li>Sample Playbook 2</li> <li>Sample Playbook 3</li> <li>Sample Inventory File (.ini format)</li> <li>Sample Inventory File (.yml format)</li> <li>Sample Host Variables File</li> </ul> </li> <li> ACI Python (Cobra) SDK<ul> <li>Practice Exercise</li> <li>Practice Exercise Solution</li> <li>Practice Exercise Example</li> </ul> </li> <li> ACI REST API<ul> <li>Practice Exercise</li> <li>Practice Exercise Solution</li> <li>Practice Exercise Example #1</li> <li>Practice Exercise Example #2</li> <li>Python Code Samples</li> </ul> </li> </ul> Management Information Tree (MIT) Assembly Challenge <ul> <li>Review the scrambled, disconnected ACI MIT diagrams in the resources/aci/mit folder within the development environment, and try to draw them (digitally or on paper) in the correct positions with the proper connections.<ul> <li>Option #1 - .png quiz #1, .png quiz #2, and .png solution</li> <li>Option #2 -  Visio Quiz and Solution File</li> </ul> </li> </ul>"},{"location":"sections/section_2/#documentation","title":"Documentation","text":"ACI Fundamentals <ul> <li>ACI Terminology Reference</li> <li>ACI Policy Model Guide<ul> <li>ACI Policy Model Quick Reference</li> </ul> </li> <li>Cisco DC App Center</li> </ul> ACI Programmability <ul> <li>APIC REST API Configuration Guide</li> <li>APIC Python SDK Documentation</li> <li>Ansible Galaxy ACI Collection</li> </ul> ACI Kubernetes CNI Plugin Integration for Red Hat OpenShift <ul> <li>ACI and Kubernetes Solution Overview</li> <li>ACI and Kubernetes Architecture and Design Guide</li> <li>ACI and Kubernetes Integration Guide</li> </ul>"},{"location":"sections/section_2/#insights","title":"Insights","text":"<ul> <li> <p>We spent plenty of time watching the videos and reading the documentation in this guide, although we spent most of our time going through the hands-on learning exercises over, and over, and over again.  The practice made a big difference in our ability to retain so many details.  Forcing ourselves to type our way through the JupyterLab exercises was really hard and was also our best teacher.</p> </li> <li> <p>The Cisco DevNet learning labs for ACI were a great starting point for us and set the tone for the things we needed to learn and practice.  Following those up with the Jupyter and MIT exercises was very beneficial.</p> </li> <li> <p>The star resource to practice just about any skills related to ACI is the DevNet Always-On ACI Sandbox.  This is a publicly accessible (no-VPN required), reservation-less, read/write, read/write ACI simulator, and we used it excessively.  All of the code samples, Jupyter Notebooks, and Ansible Playbooks bundled in this repository use this sandbox.</p> </li> </ul> <p>Caution</p> <pre><code>- From time to time, the **[DevNet Always-On ACI Sandbox](https://sandboxapicdc.cisco.com \"DevNet Always-On ACI Sandbox\"){target=_blank}** can be a bit slow or fail to respond to your API call, browser session, etc.  Generally, after a minute or two, we found the sandbox would recover from these situations.\n</code></pre> <p>tips</p> <ul> <li>Spend plenty of time working with ACI both programmatically and in the APIC GUI.</li> <li>The ACI visore tool provides a great way to understand relationships between ACI objects in the MIT.</li> <li>The ACI API Inspector vastly simplifies the process to construct REST payloads for ACI.  We recommend that you spend plenty of time observing how you can use APIC GUI interactions, via the API Inspector, to build REST payloads within Python.</li> </ul>"},{"location":"sections/section_2/#on-to-section-30","title":"On to Section 3.0","text":"<p>  Great job getting through ACI!  Let's keep going, click this link to check out Section 3.0 exam topics and resources.</p>"},{"location":"sections/section_3/","title":"Data Center Device-Centric Networking","text":""},{"location":"sections/section_3/#overview","title":"Overview","text":"<p>This section of the exam topics focuses on the programmability features of the Cisco Nexus series of switches, when the switches run the Cisco Open NX-OS operating system.  We found this particular exam topic section has the most technical variety of its counterparts and, thus, required us to build and practice a pretty diverse set of skills in the course of our DCAUTO exam prep.  We spent a good amount of time learning to pay close attention to discreet differences between the many types of Open NX-OS programmatic interfaces plus how Open NX-OS models its configuration and state data using its Data Management Engine (DME) and YANG model options (both Native and OpenConfig).</p> Section 3.0 Topic Details <ul> <li>3.1 Describe Day 0 provisioning with NX-OS<ul> <li>3.1.a Cisco POAP</li> <li>3.1.b NX-OS iPXE</li> </ul> </li> <li>3.2 Implement On-Box Programmability and Automation with NX-OS<ul> <li>3.2.a Bash</li> <li>3.2.b Linux containers (LXC and Docker using provided container)</li> <li>3.2.c NX-OS guest shell</li> <li>3.2.d Embedded Event Manager (EEM)</li> <li>3.2.e On-box Python Scripting</li> </ul> </li> <li>3.3 Compare model-driven telemetry such as YANG Push and gRPC to traditional network monitoring strategies such as SMNP, Netflow, and SYSLOG</li> <li>3.4 Construct Python script that consumes model-driven telemetry data with NX-OS</li> <li>3.5 Implement Off-Box Programmability and Automation with NX-OS<ul> <li>3.5.a Nexus NX-API (NX-API REST and NX-API CLI)</li> <li>3.5.b Nexus NETCONF using native and OpenConfig</li> <li>3.5.c Network configuration tools with NX-OS (Ansible)</li> </ul> </li> </ul>"},{"location":"sections/section_3/#resources","title":"Resources","text":""},{"location":"sections/section_3/#cisco-devnet","title":"Cisco DevNet","text":"Learning Labs <ul> <li>NX-OS Programmability<ul> <li>Introduction to NX-OS Programmability Module - All Labs</li> <li>NETCONF/YANG on Nexus - All Labs</li> </ul> </li> </ul> Files and Scripts <ul> <li>NX-OS OpenConfig YANG Model RPM Artifactory</li> <li>NX-OS POAP Python Script - GitHub Repository</li> <li>NX-OS gRPC Telemetry Protocol Definitions - GitHub Repository</li> </ul>"},{"location":"sections/section_3/#videos-on-demand","title":"Videos on Demand","text":""},{"location":"sections/section_3/#cisco-live","title":"Cisco Live","text":"On-Demand Library <ul> <li>Programmability and Automation on Cisco Nexus Platforms - DEVNET-1467</li> <li>Maximizing Network Programmability and Automation with Open NX-OS</li> <li>Data Center Telemetry with Nexus and NX-OS</li> <li>NX-OS Automation and Telemetry Made Simple, Powerful and Scalable with Open-Source Tools</li> </ul>"},{"location":"sections/section_3/#hands-on-learning","title":"Hands-On Learning","text":"DevNet Sandbox Labs <ul> <li>DevNet Reservable Open NX-OS Sandbox</li> </ul> Development Environment Resources <p>Attention</p> <ul> <li>The links below require that the local JupyterLab server is active and listening on http://localhost:8888<ul> <li>The Visual Studio Code Development Environment automatically activates the JupyterLab server.</li> </ul> </li> </ul> <p>New to JupyterLab? Click Here for an Overview</p> <p>Tip</p> <ul> <li>You may also use Visual Studio Code to explore the same code samples and hands-on exercises.  The resources folder within the Development Environment Container contains all of the source files.</li> </ul> <ul> <li> Ansible Files<ul> <li>Sample Configuration File</li> <li>Sample Playbook 1</li> <li>Sample Playbook 2</li> <li>Sample Inventory File (.yml format)</li> <li>Sample Host Variables File</li> <li>Sample Group Variables File</li> </ul> </li> <li> gNMI Telemetry Files<ul> <li>gNMI Telemetry Subscription Walk-Through Exercises</li> <li>gNMI Telemetry Subscription Python Code</li> <li>gNMI Sample Certificate</li> </ul> </li> <li> NETCONF<ul> <li>DevNet Learning Lab Hands-On Exercise</li> <li>DevNet Learning Lab Hands-On Exercise Solution</li> <li>NETCONF Walk-Through Exercise</li> <li>NETCONF Walk-Through Exercise XML Payloads</li> </ul> </li> </ul> WWT On-Demand Labs <ul> <li>Cisco Ansible Automation Lab<ul> <li>We did not follow the provided lab guide, although you may certainly do so if you are new to Ansible or want some Ansible practice.</li> <li>We used this lab primarily because it contains an NX-OS switch that we could configure to suit our study needs.</li> </ul> </li> </ul>"},{"location":"sections/section_3/#documentation","title":"Documentation","text":"Day 0 Provisioning <ul> <li>iPXE - NX-OS Programmability Guide</li> <li>POAP - NX-OS Configuration Guide</li> </ul> On-Box Programmability and Automation <ul> <li>Bash - NX-OS Programmability Guide</li> <li>Docker on NX-OS - NX-OS Programmability Guide</li> <li>Guest Shell - NX-OS Programmability Guide</li> <li>EEM Configuration - NX-OS Configuration Guide</li> <li>EEM Examples - NX-OS Configuration Guide</li> <li>On-Box Python Scripting - NX-OS Programmability Guide</li> </ul> Model-Driven Programmability &amp; Telemetry <ul> <li>Infrastructure Overview - NX-OS Programmability Guide</li> <li>Managing Components - NX-OS Programmability Guide</li> <li>OpenConfig YANG - NX-OS Programmability Guide</li> <li>NETCONF Agent - NX-OS Programmability Guide</li> <li>XMLIN Tool - NX-OS Programmability Guide</li> <li>gRPC Agent - NX-OS Programmability Guide</li> <li>gNMI Interface - NX-OS Programmability Guide</li> <li>Model-Driven Telemetry - NX-OS Programmability Guide</li> </ul> Consuming Model-Driven Telemetry with Python <ul> <li>Nexus Telemetry with gNMI &amp; OpenConfig White Paper</li> <li>Nexus Telemetry with NETCONF &amp; gNMI Blog</li> <li>Cisco gNMI Python Library - GitHub Repository</li> </ul> NX-API <ul> <li>NX-OS DME Model Reference</li> <li>NX-API CLI</li> <li>NX-API REST</li> <li>NX-API Developer Sandbox</li> </ul> Ansible with NX-OS <ul> <li>Ansible Galaxy NX-OS Collection</li> <li>Ansible Playbook Examples - GitHub Repository</li> </ul> General NX-OS Programmability References <ul> <li>NX-OS Programmability Guide - Platform Documentation</li> <li>Open NX-OS Programmability - DevNet Documentation</li> </ul>"},{"location":"sections/section_3/#insights","title":"Insights","text":"<ul> <li> <p>Cisco documentation was our predominant resource for this exam topic section.  We absolutely did NOT arbitrarily insert every link from the NX-OS Programmability Guide into this page, just to fill space.  There were only a few DevNet Learning Labs available which address the NX-OS exam topics, so we had to rely heavily on tediously walking through commands and configuration examples in official Cisco documentation.  We highly recommend that you invest a lot of hands-on time with the examples in Cisco NX-OS documentation.</p> </li> <li> <p>Effective NX-OS hands-on lab resources were hard for us to find.  The lone DevNet NX-OS Sandbox was helpful, although it had some limitations that kept us from practicing certain things, like deploying Docker Containers on NX-OS and configuring POAP.  The WWT Ansible Automation Lab was a good resource for studying and testing Ansible and Docker with NX-OS.  DevNet provides a Vagrant configuration that we did not use, although it is another NX-OS hands-on resource option.</p> </li> <li> <p>We did not find documentation that explicitly showed us how to construct Python scripts that consume model-driven telemetry.  Instead, we pieced together many different resources (referenced in the Documentation section) and conducted a lot of trial-and-error testing in order to meet our interpretation of the exam topic intent successfully.  For some really good practice, we recommend that you work through the gNMI Jupyter Walk-Through and sample Python code we put together and then write your own code to consume telemetry from different XPaths.</p> </li> <li> <p>Something we found very beneficial to our comfort level with NETCONF and YANG models was to go through the DevNet Learning Labs on those topics and, instead of copying and pasting commands (into an NX-OS hands-on environment) or even typing out the NETCONF XML payload examples in the lab guides, we forced ourselves to look at the XPath examples and then try to manually type out/construct the XML payloads.  This practice helped us become much more comfortable with YANG models, XML, and NETCONF, in general.  The NETCONF Jupyter Notebook we put together was an excellent resource for us to get that practice because the interactivity of Jupyter makes it fast and easy to try something, see it not work, make a change, and try again.</p> </li> </ul>"},{"location":"sections/section_3/#on-to-section-40","title":"On to Section 4.0","text":"<p>  You finished going through all of the Open NX-OS resources!  One more section to go, click this link to check out Section 4.0 exam topics and resources.</p>"},{"location":"sections/section_4/","title":"Data Center Compute","text":""},{"location":"sections/section_4/#overview","title":"Overview","text":"<p>This section of the exam topics primarily focuses on the programmability features of the Cisco UCS Platform, including UCSM and Cisco Intersight.  There are many programmable interfaces for UCS platforms, including a Python SDK, Windows PowerShell (via the UCS PowerTool), and various REST APIs.  Our study for this section required us to spend a lot of time in our Visual Studio Code development environment, using the UCS PowerTool CLI, writing Python using the UCS Python SDK, and writing Python to interact with the Intersight API.</p> Section 4.0 Topic Details <ul> <li>4.1 Configure Cisco UCS with developer tools<ul> <li>4.1.a UCS PowerTool</li> <li>4.1.b UCS Python SDK</li> <li>4.1.c Ansible</li> </ul> </li> <li>4.2 Describe the capabilities of the DCNM API</li> <li>4.3 Identify the steps in the Intersight API authentication method</li> <li>4.4 Construct an Intersight API call given documentation to accomplish tasks such as manage server policies, service profiles, and firmware updates</li> <li>4.5 Describe the process to implement workflows for physical and virtual infrastructure using UCS Director<ul> <li>4.5.a Pre-defined tasks</li> <li>4.5.b Custom tasks</li> <li>4.5.c Script libraries</li> <li>4.6 Utilize UCS Director REST API browser</li> </ul> </li> </ul>"},{"location":"sections/section_4/#resources","title":"Resources","text":""},{"location":"sections/section_4/#cisco-devnet","title":"Cisco DevNet","text":"Learning Labs <ul> <li>UCS Programmability<ul> <li>UCS PowerTool Introduction - All Labs</li> <li>UCS Python SDK Introduction - All Labs</li> <li>UCS PowerTool and UCS Python Intermediate -  All Labs</li> <li>Cisco Intersight REST API - All Labs</li> </ul> </li> <li>UCS for Application Developers<ul> <li>UCS Director REST API Introduction - All Labs</li> </ul> </li> </ul>"},{"location":"sections/section_4/#videos-on-demand","title":"Videos on Demand","text":""},{"location":"sections/section_4/#cisco-live","title":"Cisco Live","text":"On-Demand Library <ul> <li>Automating Your Cisco UCS with Python - Managing Your Infrastructure as Code - DEVNET-1611</li> <li>Cisco UCS &amp; Cisco Intersight - Programmability Automation &amp; Orchestration Overview - DGTL-BRKPRG-2432</li> <li>Creating, Distributing, Maintaining and Utilizing the Cisco Intersight and Cisco UCS Ansible Collections - DGTL-DEVNET-2700</li> <li>UCS Manager Automation with Ansible - DEVNET-1586</li> <li>Cisco UCS PowerTool - Deploy at Scale - DEVNET-2562</li> </ul>"},{"location":"sections/section_4/#hands-on-learning","title":"Hands-On Learning","text":"DevNet Sandbox Labs <ul> <li>DevNet UCS Management Sandbox</li> <li>UCS Platform Emulator</li> <li>DevNet Cisco Intersight Sandbox</li> <li>Intersight Managed Object Browser</li> </ul> Development Environment Resources <p>Attention</p> <ul> <li>The links below require that the local JupyterLab server is active and listening on http://localhost:8888<ul> <li>The Visual Studio Code Development Environment automatically activates the JupyterLab server.</li> </ul> </li> </ul> <p>New to JupyterLab? Click Here for an Overview</p> <p>Tip</p> <ul> <li>You may also use Visual Studio Code to explore the same code samples and hands-on exercises.  The resources folder within the Development Environment Container contains all of the source files.</li> </ul> <ul> <li> Ansible Files<ul> <li>Sample Configuration File</li> <li>Sample Playbook 1</li> <li>Sample Inventory File (.ini format)</li> </ul> </li> </ul> <ul> <li> UCS Python SDK Examples</li> </ul> <ul> <li> Intersight REST API</li> </ul> Important Intersight Code Usage Notes <p>Cisco Intersight REST API keys require an HTTP signature, and the initial setup of Intersight authentication requires several manual steps.  This repository already includes the Intersight Authentication Repository files recommended by Cisco DevNet.  These files provide the functionality required to support Intersight authentication via Python.</p> <p>If you would like to use the Intersight Python code and Jupyter Notebook examples, you must first perform the following steps:</p> <ol> <li>Obtain Intersight <code>keyId</code> and <code>keySecret</code> data using the Intersight API Authorization instructions.</li> <li> <p>Create new blank text files within your local copy of the dcauto-study-resources repository with the paths:</p> <ul> <li><code>/resources/ucs/intersight/api_keys/keyId.txt</code></li> <li><code>/resources/ucs/intersight/api_keys/keySecret.txt</code></li> </ul> </li> <li> <p>Paste the contents of your Intersight <code>keyId</code> into the <code>keyId.txt</code> file.</p> </li> </ol> <code>keyId.txt</code> example file contents <p>4196c31c7562012c339be0b/6129f1c7564612d331be0fd/6096c3552128512d339be2cb</p> <ol> <li>Paste the contents of your Intersight <code>keySecret</code> into the <code>keySecret.txt</code> file.</li> </ol> <code>keySecret.txt</code> example file contents <p>-----BEGIN RSA PRIVATE KEY----- WuJ1V54N4uHj9rjDRvl9zp2eoA0J6SFB+dwp2Hoj24+pSnr4FPJ/9+PgcRsgUVjq IEHbVKRnrr2xWcXtQnUsa0Dxbdw8biyoo2UiHlCyxUqJEtzSEeeWf9V8hjyqUwtr UyIeWZOhQ2NYbboUgrCMeHhgE6LNTbrGAaSmNZ3BSJnPvRCM7u5xRkFvAoGBAPcN skfHYw23WHTTZD/Z1m1kYZj2LkgAI3/LDQNHaE/enxvq0q+/SrrSVraYBhp8B7xO Vg7gbMXRczSCh5jhQqMm5K1I8ZBlWG0kNdQcuuabAGewNr7bRc+LVZQN+RKsQ8BJ /00bV3GmkD30YYF7pS6LrDiErvYudS0C+9NYeMXgST1OTnRh+YVNisBwvS02Gbyc Uv+Eiy2ZnsIxDiqlvWlGlIrMeLiwmPDVeoM0XyfkZ+5DLFKQYFYABf7LFQuWaKfw LndthGB60BM2nZXohSJzgPsCgYEAi2zlYnD6S/FfMH9kokxUIWR3WBYHRIcfga2c aG9SRVEERoMd6CVzDUBLw7zEJQo+a11iX/70JCfydn37/KGUM/NtNwZlnfI0F1RK NK0KJb7wWZQvMUMagOjHoUjJempRyiEDJpm96VxMWCotG/likj052PxdctvHsRg8 Ad0L3K0CgYAgmXD6dUCJqDOwfs9BBbD6bbr6aE7kitLEoOZ0Rz37MSmenJMt6/mf tIuV+MMhHKWxXtLCUPZjP60nk/d2oR6tN7X75QL9ioduN/QIArZGog== -----END RSA PRIVATE KEY-----</p> <ul> <li>Intersight API Python Helper Functions<ul> <li>The docstrings in <code>intersight_helper.py</code> include usage instructions.</li> <li>Use these helper functions from your Python interpreter/REPL with the expression:<ul> <li><code>from intersight_helper import *</code></li> </ul> </li> </ul> </li> <li>Intersight REST API Jupyter Notebook Exercises</li> </ul> UCS Director REST API Notes <ul> <li>API endpoint to request an API key:<ul> <li><code>https://{{ucsd}}/app/api/rest?opName=getRESTKey&amp;user={{username}}&amp;password={{password}}</code></li> </ul> </li> <li>Authentication header name:<ul> <li><code>X-Cloupia-Request-Key</code></li> </ul> </li> <li>Possible query parameters:<ul> <li><code>opName</code> - name of the current operation.</li> <li><code>opData</code>- payload body.</li> <li><code>formatType</code> - json (default) or xml.</li> </ul> </li> </ul> DCNM REST API Notes <ul> <li> <p>DCNM has Multiple APIs:</p> <ul> <li>LAN Fabric.</li> <li>L4-L7 Services.</li> <li>Endpoint Locator.</li> <li>Media Controller (DCNM control plane).</li> <li>SAN Management.</li> </ul> </li> <li> <p>APIs support <code>GET</code>, <code>POST</code>, <code>PUT</code>, &amp; <code>DELETE</code> operations.</p> </li> <li>API Authentication:<ul> <li>API URI Endpoint - <code>/logon</code></li> <li>Authentication mechanism - HTTP Basic<ul> <li>Successful authentication requests return a token which must be sent in subsequent API requests, in a custom header with the format:<ul> <li><code>{\"DCNM-Token\": token}</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"sections/section_4/#documentation","title":"Documentation","text":"UCS Developer Tools <ul> <li>UCS Python SDK Reference Guide</li> <li>UCS PowerTool Resource Landing Page</li> <li>DevNet UCS PowerTool Docker Container on Docker Hub<ul> <li>The resources in this Docker Container are already built-in to the Visual Studio Development Container in this repository.</li> </ul> </li> </ul> Cisco Intersight Programmability <ul> <li>Cisco Intersight RESTful API Guide</li> </ul> Ansible with UCS and Intersight <ul> <li>Ansible Galaxy UCS Manager Collection</li> <li>Ansible Galaxy Intersight Collection</li> </ul> UCS Director and DCNM <ul> <li>Cisco UCS Director REST API Getting Started Guide</li> <li>Cisco UCS Director Orchestration Guide</li> </ul>"},{"location":"sections/section_4/#insights","title":"Insights","text":"<ul> <li> <p>Preparing for the exam topics in this section was an exercise in us spending almost all of our study time in the CLI of our development environments. If you didn't already notice, we included quite a few DevNet Sandbox Labs in the list of materials that we recommend.  We did that for a good reason; those labs are really, really good because they provide many interactive and repeatable exercises for the UCS PowerTool, the UCS Python SDK, and the Intersight REST API.  We probably went through each of those lab exercises 10+ times to properly commit UCS programmability to memory.  We think all of that practice was time well spent.</p> </li> <li> <p>For our UCS lab resources, we used a combination of the DevNet UCS Management Sandbox and the UCS Platform Emulator.  Personally, I preferred to have a couple of UCS Platform Emulator instances as virtual machines on my computer.  I did that mostly because I didn't have to reserve DevNet Sandbox resources.  That said, we did not find any glaring limitations with either option, so you can't go wrong.</p> </li> <li> <p>For our Intersight study, the API guide was solid gold.  We made sure to get plenty of hands-on time with:</p> <ul> <li>The development environment included in this repository.</li> <li>The Intersight REST API Jupyter Notebook Exercises, which will help you get an practice and working examples of the many query Intersight options.</li> <li>The Intersight API reference.</li> </ul> </li> <li> <p>One more plug for the Intersight API reference, we found it very valuable to get plenty of practice understanding which parameters you can expect to receive in a REST API query response from Intersight.  The same is true for our practice determining which Intersight parameters you need to specify in the body of HTTP requests, to either add new objects to Intersight or to modify existing Intersight objects.</p> </li> <li> <p>We ended up getting a bit of tunnel vision with our UCS and Intersight studies, and we almost forgot to get some work in with UCSD and DCNM.  The respective DevNet learning DevNet Sandbox Labs for UCSD and DCNM were a big help.</p> </li> </ul>"},{"location":"sections/section_4/#lessons-learned","title":"Lessons Learned","text":"<p>  You finished the UCS section!  That's all of the study resources we accumulated during our exam preparation.  If you're interested in some general guidance on your path to DCAUTO certification, click this link to check out a summary of our Lessons Learned.</p>"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cisco DCAUTO Exam Study Resources \u00b6 About \u00b6 We have a lot of people to thank for helping us pass the Cisco DCAUTO exam. Many of those people we have never met and, likely, will never meet, in-person or otherwise. Each of these people took time from their lives to publish something they know or built so the rest of us, somehow, via some search engine, could have even a slightly more simple path to whatever it is we want to learn. To everyone who took the time to help the entire DevNet community, this guide is a both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view. It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people that follow. We wish you success in your climb. Overview \u00b6 This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam. All of the information in this guide is a curation of study resources which the authors used in order to study for and pass the Cisco DCAUTO exam. Attention All all content in this guide strictly complies with the Cisco Certification and Confidentiality Agreement , also known as the Cisco Certification Non-Disclosure Agreement ( NDA ). We welcome and appreciate any Cisco NDA-compliant contributions from the community. Info This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet. All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates. Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind. We pay for these resources just like anyone else would and we recommend the paid resources because we think they are highly-valuable. Exam Topics \u00b6 The Cisco DCAUTO exam topics cover a variety of skills. Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.) while others are product-agnostic, foundational infrastructure automation and programmibility skills (Git, Python, Ansible, etc.). This is the fourth DevNet exam that we've studied for yet the first for which we struggled to find a curated set of resources to study from. As we amassed notes, links, and our own code snippets, we organized everything into categories that correspond to the four sections in the Exam Topics list. As such, we organized everything we have to share into sections which correspond to those same sections, so there is no ambiguity about how to find the resources that you need. Getting Started \u00b6 For us, liftoff is the hardest part of the study process. Getting our computers setup in a way which allows us to study and takes notes seems to take way more time than we think it will. To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible. We think the best way to study for the DCAUTO exam is to have a great development environment so we packaged one right into the GitHub repository which supports this site. The study material content doesn't change whether you choose to use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment. These are the tools that we recommend to get started with your DCAUTO exam study: An account registration with Cisco DevNet . Tip If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account. A Windows or macOS computer with the following software installed : Docker Desktop . Git SCM from Git-SCM or from a Windows or macOS package manager. Visual Studio Code . Cisco AnyConnect or OpenConnect VPN client. A desktop hypervisor ( Parallels , VirtualBox , VMware Fusion , or VMware Workstation Player ). Tip A desktop hypervisor is optional. We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms. Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.). Tip In our exmaples, we use either the Visual Studio Code Integrated Terminal or the macOS Terminal application . Topic Navigation \u00b6 Tip Click to expand any topic. Development Environment Setup Visual Studio Code Dev Container Section 1.0 - Network Programmability Foundation Section 1.0 - Network Programmability Foundation Section 2.0 - Controller Based Data Center Networking Section 2.0 - Controller Based Data Center Networking Section 3.0 - Data Center Device-Centric Networking Section 3.0 - Data Center Device-Centric Networking Section 4.0 - Data Center Compute Section 4.0 - Data Center Compute Appendix Appendix A - Lessons Learned Let's Do This \u00b6 You're already to get started! Click this link to setup your development environment.","title":"DCAUTO Study Resources"},{"location":"#cisco-dcauto-exam-study-resources","text":"","title":"Cisco DCAUTO Exam Study Resources"},{"location":"#about","text":"We have a lot of people to thank for helping us pass the Cisco DCAUTO exam. Many of those people we have never met and, likely, will never meet, in-person or otherwise. Each of these people took time from their lives to publish something they know or built so the rest of us, somehow, via some search engine, could have even a slightly more simple path to whatever it is we want to learn. To everyone who took the time to help the entire DevNet community, this guide is a both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view. It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people that follow. We wish you success in your climb.","title":"About"},{"location":"#overview","text":"This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam. All of the information in this guide is a curation of study resources which the authors used in order to study for and pass the Cisco DCAUTO exam. Attention All all content in this guide strictly complies with the Cisco Certification and Confidentiality Agreement , also known as the Cisco Certification Non-Disclosure Agreement ( NDA ). We welcome and appreciate any Cisco NDA-compliant contributions from the community. Info This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet. All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates. Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind. We pay for these resources just like anyone else would and we recommend the paid resources because we think they are highly-valuable.","title":"Overview"},{"location":"#exam-topics","text":"The Cisco DCAUTO exam topics cover a variety of skills. Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.) while others are product-agnostic, foundational infrastructure automation and programmibility skills (Git, Python, Ansible, etc.). This is the fourth DevNet exam that we've studied for yet the first for which we struggled to find a curated set of resources to study from. As we amassed notes, links, and our own code snippets, we organized everything into categories that correspond to the four sections in the Exam Topics list. As such, we organized everything we have to share into sections which correspond to those same sections, so there is no ambiguity about how to find the resources that you need.","title":"Exam Topics"},{"location":"#getting-started","text":"For us, liftoff is the hardest part of the study process. Getting our computers setup in a way which allows us to study and takes notes seems to take way more time than we think it will. To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible. We think the best way to study for the DCAUTO exam is to have a great development environment so we packaged one right into the GitHub repository which supports this site. The study material content doesn't change whether you choose to use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment. These are the tools that we recommend to get started with your DCAUTO exam study: An account registration with Cisco DevNet . Tip If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account. A Windows or macOS computer with the following software installed : Docker Desktop . Git SCM from Git-SCM or from a Windows or macOS package manager. Visual Studio Code . Cisco AnyConnect or OpenConnect VPN client. A desktop hypervisor ( Parallels , VirtualBox , VMware Fusion , or VMware Workstation Player ). Tip A desktop hypervisor is optional. We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms. Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.). Tip In our exmaples, we use either the Visual Studio Code Integrated Terminal or the macOS Terminal application .","title":"Getting Started"},{"location":"#topic-navigation","text":"Tip Click to expand any topic. Development Environment Setup Visual Studio Code Dev Container Section 1.0 - Network Programmability Foundation Section 1.0 - Network Programmability Foundation Section 2.0 - Controller Based Data Center Networking Section 2.0 - Controller Based Data Center Networking Section 3.0 - Data Center Device-Centric Networking Section 3.0 - Data Center Device-Centric Networking Section 4.0 - Data Center Compute Section 4.0 - Data Center Compute Appendix Appendix A - Lessons Learned","title":"Topic Navigation"},{"location":"#lets-do-this","text":"You're already to get started! Click this link to setup your development environment.","title":"Let's Do This"},{"location":"sections/appendix/","text":"Appendix \u00b6 Appendix A - Lessons Learned \u00b6 Know DEVASC Exam Topics Well \u00b6 Pay Attention to Taxonomy \u00b6 Study With Someone Else \u00b6 Pre-Identify All of your Hands-On Study Resources \u00b6 Change Study Topics/Sections Frequently \u00b6 Reverse Plan a Study Schedule \u00b6 Avoid Taking Shortcuts \u00b6 Treat Failure as Shameless Learning \u00b6","title":"Supplimentary Content"},{"location":"sections/appendix/#appendix","text":"","title":"Appendix"},{"location":"sections/appendix/#appendix-a-lessons-learned","text":"","title":"Appendix A - Lessons Learned"},{"location":"sections/appendix/#know-devasc-exam-topics-well","text":"","title":"Know DEVASC Exam Topics Well"},{"location":"sections/appendix/#pay-attention-to-taxonomy","text":"","title":"Pay Attention to Taxonomy"},{"location":"sections/appendix/#study-with-someone-else","text":"","title":"Study With Someone Else"},{"location":"sections/appendix/#pre-identify-all-of-your-hands-on-study-resources","text":"","title":"Pre-Identify All of your Hands-On Study Resources"},{"location":"sections/appendix/#change-study-topicssections-frequently","text":"","title":"Change Study Topics/Sections Frequently"},{"location":"sections/appendix/#reverse-plan-a-study-schedule","text":"","title":"Reverse Plan a Study Schedule"},{"location":"sections/appendix/#avoid-taking-shortcuts","text":"","title":"Avoid Taking Shortcuts"},{"location":"sections/appendix/#treat-failure-as-shameless-learning","text":"","title":"Treat Failure as Shameless Learning"},{"location":"sections/section_0/","text":"Development Environment Setup \u00b6 Overview \u00b6 In case you're wondering, \" Why do I need a development environment? I'm studying for an exam, right? \" In our opinion, this is an exam for operations developers and a developer needs the right tools in order to do their job well. Because the exam topics cover so many subjects, the array of tools, software packages, etc. is big enough that putting together an effective development environment, even if only for exam study, takes a lot of time. We want you to save that time and help you get into the study materials as quickly as possible. VS Code Dev Container \u00b6 Our development environment uses the Development Container feature in Visual Studio Code. The reasons we use this particular environment are: Consistency: this development environment will work in the same way on any computer that has Visual Studio Code and Docker installed. Portability: the development environment is part of the Git repository which supports this guide so simply cloning the repository means you have all of the files you need. Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study. Development Environment Contents Reference Local web servers MkDocs at http://localhost:8000 - for offline documentation access. Jupyter Lab at http://localhost:8888 - for Python code walkthroughs. Container OS packages Git - to work with local or remote repositories. Core Python packages ipython - enhanced interactive Python shell. ncclient - NETCONF client for Python. pyyaml - YAML data encoding and decoding for Python. requests - Simple HTTP API interactions in Python. xmltodict - XML Data encoding and decoding for Python. Python linting tools ansible-lint - Lint YAML files for Ansible. autopep8 - Automatic Python PEP 8 style formating. flake8 - Lint Python files for PEP8 compliance. yamllint - Lint YAML files. Product-specific SDKs and tools Ansible - Automation tool for exam topic products. Cisco ACI Python SDK (Cobra) - simplified Python interaction for Cisco ACI. Cisco gNMI Python package - gNMI client for Python. Cisco UCS Manager Python SDK - simplified Python interaction for Cisco UCS Manager. Product-specific Ansible Collections Cisco ACI Ansible Collection Cisco Intersight Ansible Collection Cisco NX-OS (Nexus) Ansible Collection Cisco UCS Ansible Collection Microsoft PowerShell development environment PowerShell for Linux Cisco UCS PowerTool on PowerShell Gallery Source/credit for PowerShell launch script Dev Environment Setup \u00b6 The setup process takes a little bit of work on the first pass. Afterwards, the setup and teardown is quick and easy. Here are the high-level steps to setup the development environment: Tip Click to expand each step. 1. Install Desktop Software Choose a Windows or macOS computer Install Docker Desktop Install Git SCM Install Visual Studio Code Install Cisco AnyConnect or OpenConnect VPN *Optional - Install a Desktop Hypervisor ( recommendations ) 2. Clone the DCAUTO Study Resources Git Repository Open the Visual Studio Code Integrated Terminal Navigate to the directory where you will clone the Git repository. Enter the following command: # Clone the repository git clone https://github.com/wwt/dcauto-study-resources.git 3. Setup Visual Studio Code Start Docker Desktop Launch Visual Studio Code Install the Visual Studio Code Remote Development Extension 3a. Copy the Remote Development Bundle extension name to your clipboard: ms-vscode-remote.vscode-remote-extensionpack 3b. Install the Visual Studio Code Remote Development Bundle: 3c. Verify the Remote Development Bundle installation: 3d. Reopen the current workspace in a Visual Studio Code Development Container: 4. Observe Development Container Activation Wait for Development Container Activation 1a. Click \"show log\" to monitor container activation: 1b. Observe the development container build process: Attention The initial development container build may take 5-10 minutes, please be patient. Subsequent launches should only take a few seconds. Verify Development Container Activation 2a. Observe the repository files reappear and the log message scrolling stop: 5. Use the Development Environment Open the \" resources \" Folder 1a. Study materials, code samples, references, etc. are here: Use the Visual Studio Code Integrated Terminal 2a. Use the terminal controls pallete to open new shells: 2b. Use terminal tabs to switch between or close any open terminals: 6. Teardown and Re-Launch Teardown the Development Environment 1a. Close the Dev Container, Without Deleting the Dev Environment Image: Re-Launch the Development Environment 2a. Quickly Restart the Dev Container From the Welcome Screen: Now You're Ready \u00b6 Your development environment is ready to go and that means it's time to get to the exam topics. Click this link to check out Section 1.0 exam topics and resources.","title":"Development Environment Setup"},{"location":"sections/section_0/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"sections/section_0/#overview","text":"In case you're wondering, \" Why do I need a development environment? I'm studying for an exam, right? \" In our opinion, this is an exam for operations developers and a developer needs the right tools in order to do their job well. Because the exam topics cover so many subjects, the array of tools, software packages, etc. is big enough that putting together an effective development environment, even if only for exam study, takes a lot of time. We want you to save that time and help you get into the study materials as quickly as possible.","title":"Overview"},{"location":"sections/section_0/#vs-code-dev-container","text":"Our development environment uses the Development Container feature in Visual Studio Code. The reasons we use this particular environment are: Consistency: this development environment will work in the same way on any computer that has Visual Studio Code and Docker installed. Portability: the development environment is part of the Git repository which supports this guide so simply cloning the repository means you have all of the files you need. Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study. Development Environment Contents Reference Local web servers MkDocs at http://localhost:8000 - for offline documentation access. Jupyter Lab at http://localhost:8888 - for Python code walkthroughs. Container OS packages Git - to work with local or remote repositories. Core Python packages ipython - enhanced interactive Python shell. ncclient - NETCONF client for Python. pyyaml - YAML data encoding and decoding for Python. requests - Simple HTTP API interactions in Python. xmltodict - XML Data encoding and decoding for Python. Python linting tools ansible-lint - Lint YAML files for Ansible. autopep8 - Automatic Python PEP 8 style formating. flake8 - Lint Python files for PEP8 compliance. yamllint - Lint YAML files. Product-specific SDKs and tools Ansible - Automation tool for exam topic products. Cisco ACI Python SDK (Cobra) - simplified Python interaction for Cisco ACI. Cisco gNMI Python package - gNMI client for Python. Cisco UCS Manager Python SDK - simplified Python interaction for Cisco UCS Manager. Product-specific Ansible Collections Cisco ACI Ansible Collection Cisco Intersight Ansible Collection Cisco NX-OS (Nexus) Ansible Collection Cisco UCS Ansible Collection Microsoft PowerShell development environment PowerShell for Linux Cisco UCS PowerTool on PowerShell Gallery Source/credit for PowerShell launch script","title":"VS Code Dev Container"},{"location":"sections/section_0/#dev-environment-setup","text":"The setup process takes a little bit of work on the first pass. Afterwards, the setup and teardown is quick and easy. Here are the high-level steps to setup the development environment: Tip Click to expand each step. 1. Install Desktop Software Choose a Windows or macOS computer Install Docker Desktop Install Git SCM Install Visual Studio Code Install Cisco AnyConnect or OpenConnect VPN *Optional - Install a Desktop Hypervisor ( recommendations ) 2. Clone the DCAUTO Study Resources Git Repository Open the Visual Studio Code Integrated Terminal Navigate to the directory where you will clone the Git repository. Enter the following command: # Clone the repository git clone https://github.com/wwt/dcauto-study-resources.git 3. Setup Visual Studio Code Start Docker Desktop Launch Visual Studio Code Install the Visual Studio Code Remote Development Extension 3a. Copy the Remote Development Bundle extension name to your clipboard: ms-vscode-remote.vscode-remote-extensionpack 3b. Install the Visual Studio Code Remote Development Bundle: 3c. Verify the Remote Development Bundle installation: 3d. Reopen the current workspace in a Visual Studio Code Development Container: 4. Observe Development Container Activation Wait for Development Container Activation 1a. Click \"show log\" to monitor container activation: 1b. Observe the development container build process: Attention The initial development container build may take 5-10 minutes, please be patient. Subsequent launches should only take a few seconds. Verify Development Container Activation 2a. Observe the repository files reappear and the log message scrolling stop: 5. Use the Development Environment Open the \" resources \" Folder 1a. Study materials, code samples, references, etc. are here: Use the Visual Studio Code Integrated Terminal 2a. Use the terminal controls pallete to open new shells: 2b. Use terminal tabs to switch between or close any open terminals: 6. Teardown and Re-Launch Teardown the Development Environment 1a. Close the Dev Container, Without Deleting the Dev Environment Image: Re-Launch the Development Environment 2a. Quickly Restart the Dev Container From the Welcome Screen:","title":"Dev Environment Setup"},{"location":"sections/section_0/#now-youre-ready","text":"Your development environment is ready to go and that means it's time to get to the exam topics. Click this link to check out Section 1.0 exam topics and resources.","title":"Now You're Ready"},{"location":"sections/section_1/","text":"Network Programmability Foundation \u00b6 Overview \u00b6 This section of the exam topics focuses on the skills that will want to be very comfortable with before you can effectively study for the remaining, product-specific exam topics (in sections 2.0, 3.0, and 4.0). In our exam preparation, we didn't spend a ton of dedicated time on the topics in this section because these particular topics are quite familiar to us from previous DevNet exam study work (DEVASC, ENAUTO, & DEVCOR), we help teach these topics in our free, ongoing, open-to-the-public DevNet Study Group meetings, and because we work with many of the topics, daily. We do, however, remember exactly how we felt when these topics were new to us and we have plenty of resources to share. Also, we included some general Ansible references that we found helpful in this section, since the exam topics in each of the subsequent sections have an Ansible automation element. Section 1.0 Topic Details 1.1 Utilize common version control operations with git: add, clone, push, commit, diff, branching, merging conflict 1.2 Describe characteristics of API styles (REST and RPC) 1.3 Describe the challenges encountered and patterns used when consuming APIs synchronously and asynchronously 1.4 Interpret Python scripts containing data types, functions, classes, conditions, and looping 1.5 Describe the benefits of Python virtual environments 1.6 Explain the benefits of using network configuration tools such as Ansible and Puppet for automating data center platforms Resources \u00b6 Cisco DevNet \u00b6 Learning Labs Introduction to DevNet Learning Path Programming Fundamentals Module, All Labs REST API Fundamentals Module, All Labs Videos on Demand \u00b6 WWT Digital Platform \u00b6 Individual Topics Version Control 101 Pluralsight \u00b6 Cisco Certified DevNet Associate Certification Path Introduction to the Cisco Certified DevNet Associate Certification Getting Started with Software Development Using Cisco DevNet Managing Cisco Networks via Infrastructure as Code Individual Courses Provisioning and Managing Networks Using Common Automation Tools Hands-On Learning \u00b6 Guided Walkthroughs WWT Git Foundations Git Repository WWT Docker Foundations Git Repository Hands-On Labs WWT Programmability Foundations Lab Practice Tools Git Visualizer Documentation \u00b6 Code Formatting Code Beautifier Tool for JSON, XML, YAML, etc. Python RealPython Virtual Environments Primer RealPython Working With JSON Data in Python Ansible Ansible Configuration Files Ansible Inventory Ansible Variables Insights \u00b6 Force yourself to use the skills you learn in this section frequently as you study the remaining exam topic sections. Lots of repetition will help you build and retain these skills and we think it is important that these skills be second-nature to you, as you prepare for a certification exam. The Cisco DevNet learning labs and WWT guided walkthroughs are excellent, repeatable learning tools which present you content in small chunks. You can repeat any or all of this content as many times as you like. Our favorite resource to learn this material is Pluralsight. The author of the courses we recommend, Nick Russo, does an absolutely fantastic job of explaining core concepts in a way that we could easily consume. Yes, Pluralsight is a paid resource and we have our own subscriptions. In our opinion, the monthly cost is well worth the price. On to Section 2.0 \u00b6 Nice work on the foundational topics! Keep up the good work and click this link to check out Section 2.0 exam topics and resources.","title":"Network Programmability Foundation"},{"location":"sections/section_1/#network-programmability-foundation","text":"","title":"Network Programmability Foundation"},{"location":"sections/section_1/#overview","text":"This section of the exam topics focuses on the skills that will want to be very comfortable with before you can effectively study for the remaining, product-specific exam topics (in sections 2.0, 3.0, and 4.0). In our exam preparation, we didn't spend a ton of dedicated time on the topics in this section because these particular topics are quite familiar to us from previous DevNet exam study work (DEVASC, ENAUTO, & DEVCOR), we help teach these topics in our free, ongoing, open-to-the-public DevNet Study Group meetings, and because we work with many of the topics, daily. We do, however, remember exactly how we felt when these topics were new to us and we have plenty of resources to share. Also, we included some general Ansible references that we found helpful in this section, since the exam topics in each of the subsequent sections have an Ansible automation element. Section 1.0 Topic Details 1.1 Utilize common version control operations with git: add, clone, push, commit, diff, branching, merging conflict 1.2 Describe characteristics of API styles (REST and RPC) 1.3 Describe the challenges encountered and patterns used when consuming APIs synchronously and asynchronously 1.4 Interpret Python scripts containing data types, functions, classes, conditions, and looping 1.5 Describe the benefits of Python virtual environments 1.6 Explain the benefits of using network configuration tools such as Ansible and Puppet for automating data center platforms","title":"Overview"},{"location":"sections/section_1/#resources","text":"","title":"Resources"},{"location":"sections/section_1/#cisco-devnet","text":"Learning Labs Introduction to DevNet Learning Path Programming Fundamentals Module, All Labs REST API Fundamentals Module, All Labs","title":" Cisco DevNet"},{"location":"sections/section_1/#videos-on-demand","text":"","title":"Videos on Demand"},{"location":"sections/section_1/#wwt-digital-platform","text":"Individual Topics Version Control 101","title":" WWT Digital Platform"},{"location":"sections/section_1/#pluralsight","text":"Cisco Certified DevNet Associate Certification Path Introduction to the Cisco Certified DevNet Associate Certification Getting Started with Software Development Using Cisco DevNet Managing Cisco Networks via Infrastructure as Code Individual Courses Provisioning and Managing Networks Using Common Automation Tools","title":" Pluralsight"},{"location":"sections/section_1/#hands-on-learning","text":"Guided Walkthroughs WWT Git Foundations Git Repository WWT Docker Foundations Git Repository Hands-On Labs WWT Programmability Foundations Lab Practice Tools Git Visualizer","title":" Hands-On Learning"},{"location":"sections/section_1/#documentation","text":"Code Formatting Code Beautifier Tool for JSON, XML, YAML, etc. Python RealPython Virtual Environments Primer RealPython Working With JSON Data in Python Ansible Ansible Configuration Files Ansible Inventory Ansible Variables","title":" Documentation"},{"location":"sections/section_1/#insights","text":"Force yourself to use the skills you learn in this section frequently as you study the remaining exam topic sections. Lots of repetition will help you build and retain these skills and we think it is important that these skills be second-nature to you, as you prepare for a certification exam. The Cisco DevNet learning labs and WWT guided walkthroughs are excellent, repeatable learning tools which present you content in small chunks. You can repeat any or all of this content as many times as you like. Our favorite resource to learn this material is Pluralsight. The author of the courses we recommend, Nick Russo, does an absolutely fantastic job of explaining core concepts in a way that we could easily consume. Yes, Pluralsight is a paid resource and we have our own subscriptions. In our opinion, the monthly cost is well worth the price.","title":" Insights"},{"location":"sections/section_1/#on-to-section-20","text":"Nice work on the foundational topics! Keep up the good work and click this link to check out Section 2.0 exam topics and resources.","title":"On to Section 2.0"},{"location":"sections/section_2/","text":"Controller Based Data Center Networking \u00b6 Overview \u00b6 This section of the exam topics focuses almost entirely on working with Cisco Application Centric Infrastructure (ACI) programmatically. It is essential to be familiar with its building blocks, specifically the ACI Policy Object Model, in order to effectively construct and parse its API payloads. Section 2.0 Topic Details 2.1 Describe the following: 2.1.a ACI target policy 2.1.b ACI application hosting capabilities 2.1.c Implementation of an ACI application from the Cisco ACI Apps Center 2.2 Leverage the API inspector to explore the REST API calls made by the ACI GUI 2.3 Construct a Python script to create an application policy using the ACI REST API 2.4 Construct a Python script to create an application policy using the ACI Cobra SDK 2.5 Construct an Ansible playbook to create an application policy 2.6 Describe the benefits of integrating Kubernetes infrastructure using the ACI CNI plugin Resources \u00b6 Cisco DevNet \u00b6 Learning Labs ACI Programmability Introduction to ACI Programmability Module, All Labs Intermediate ACI Programmability Module, All Labs Introduction to ACI and Ansible Module, All Labs Videos on Demand \u00b6 Pluralsight \u00b6 Individual Courses Cisco Data Center Core: Implementing Automation Cisco YouTube \u00b6 Cisco Live Mastering ACI Programmability and Automating common DC Tasks NetDevOps Live Exploring the ACI networking plugin for Kubernetes Hands-On Learning \u00b6 DevNet Sandbox Labs DevNet Always-On ACI Sandbox Sandbox Access Instructions Development Environment Resources Attention Use Visual Studio Code to explore the resources folder within the Development Environment Container to review code samples and hands-on exercises. The links below require that the local Jupyter Lab server is active and listening on **http://localhost:8888\" The Visual Studio Code Development Environment automatically activates the Jupyter Lab server. Ansible ACI Python (Cobra) SDK Practice Exercise Practice Exercise Solution Practice Exercise Example ACI REST API Practice Exercise Practice Exercise Solution Practice Exercise Example #1 Practice Exercise Example #2 Python Code Samples Management Information Tree (MIT) Assembly Challenge Review the scrambled, disconnected ACI MIT diagrams and try to draw them (digitally or on paper) in the correct positions with the correct connections. Option #1 - .png quiz #1 , .png quiz #2 , and .png solution Option #2 - Visio Quiz and Solution File Documentation \u00b6 ACI Fundamentals ACI Terminology Reference ACI Policy Model Guide ACI Policy Model Quick Reference Cisco DC App Center ACI Programmability APIC REST API Configuration Guide APIC Python SDK Documentation Ansible Galaxy ACI Collection ACI Kubernetes CNI Plugin Integration for Red Hat OpenShift ACI and Kubernetes Solution Overview ACI and Kubernetes Architecture and Design Guide ACI and Kubernetes Integration Guide Insights \u00b6 We spent plenty of time watching the videos and reading the documentation in this guide although we spent most of our time going through the hands-on learning exercises over, and over, and over again. The practice made a big difference in our ability to retain so many details. Forcing ourselves to type our way through the Jupyter Lab exercises was really hard and was also our best teacher. The Cisco DevNet learning labs for ACI were a great starting point for us and set the tone for the things we needed to learn and practice. Following those up with the Jupyter and MIT exercises was very beneficial. The star resource to practice just about any skills related to ACI is the DevNet Always-On ACI Sandbox . This is a publicly-accessible (no-VPN required), reservationless, read/write, read/write ACI simulator and we used it excessively. All of the code samples, Jupyter Notebooks, and Ansible Playbooks bundled in this repository use this sandbox. Caution From time to time, the DevNet Always-On ACI Sandbox can be a bit slow or fail to respond to your API call, browser session, etc. Generally, after a minute or two, we found the sandbox would recover from these situations. tips Spend plenty of time working with ACI both programmatically and in the APIC GUI. The ACI visore tool provides a great way to understand relationships between ACI objects in the MIT. The ACI API Inspector vastly simplifies the process to construct REST payloads for ACI. We recommend that you spend plenty of time observing how you can use APIC GUI interactions, via the API Inspector, to construct REST payloads within Python. On to Section 3.0 \u00b6 Great job getting through ACI! Let's keep going, click this link to check out Section 2.0 exam topics and resources.","title":"Controller Based Data Center Networking"},{"location":"sections/section_2/#controller-based-data-center-networking","text":"","title":"Controller Based Data Center Networking"},{"location":"sections/section_2/#overview","text":"This section of the exam topics focuses almost entirely on working with Cisco Application Centric Infrastructure (ACI) programmatically. It is essential to be familiar with its building blocks, specifically the ACI Policy Object Model, in order to effectively construct and parse its API payloads. Section 2.0 Topic Details 2.1 Describe the following: 2.1.a ACI target policy 2.1.b ACI application hosting capabilities 2.1.c Implementation of an ACI application from the Cisco ACI Apps Center 2.2 Leverage the API inspector to explore the REST API calls made by the ACI GUI 2.3 Construct a Python script to create an application policy using the ACI REST API 2.4 Construct a Python script to create an application policy using the ACI Cobra SDK 2.5 Construct an Ansible playbook to create an application policy 2.6 Describe the benefits of integrating Kubernetes infrastructure using the ACI CNI plugin","title":"Overview"},{"location":"sections/section_2/#resources","text":"","title":"Resources"},{"location":"sections/section_2/#cisco-devnet","text":"Learning Labs ACI Programmability Introduction to ACI Programmability Module, All Labs Intermediate ACI Programmability Module, All Labs Introduction to ACI and Ansible Module, All Labs","title":" Cisco DevNet"},{"location":"sections/section_2/#videos-on-demand","text":"","title":"Videos on Demand"},{"location":"sections/section_2/#pluralsight","text":"Individual Courses Cisco Data Center Core: Implementing Automation","title":" Pluralsight"},{"location":"sections/section_2/#cisco-youtube","text":"Cisco Live Mastering ACI Programmability and Automating common DC Tasks NetDevOps Live Exploring the ACI networking plugin for Kubernetes","title":" Cisco YouTube"},{"location":"sections/section_2/#hands-on-learning","text":"DevNet Sandbox Labs DevNet Always-On ACI Sandbox Sandbox Access Instructions Development Environment Resources Attention Use Visual Studio Code to explore the resources folder within the Development Environment Container to review code samples and hands-on exercises. The links below require that the local Jupyter Lab server is active and listening on **http://localhost:8888\" The Visual Studio Code Development Environment automatically activates the Jupyter Lab server. Ansible ACI Python (Cobra) SDK Practice Exercise Practice Exercise Solution Practice Exercise Example ACI REST API Practice Exercise Practice Exercise Solution Practice Exercise Example #1 Practice Exercise Example #2 Python Code Samples Management Information Tree (MIT) Assembly Challenge Review the scrambled, disconnected ACI MIT diagrams and try to draw them (digitally or on paper) in the correct positions with the correct connections. Option #1 - .png quiz #1 , .png quiz #2 , and .png solution Option #2 - Visio Quiz and Solution File","title":" Hands-On Learning"},{"location":"sections/section_2/#documentation","text":"ACI Fundamentals ACI Terminology Reference ACI Policy Model Guide ACI Policy Model Quick Reference Cisco DC App Center ACI Programmability APIC REST API Configuration Guide APIC Python SDK Documentation Ansible Galaxy ACI Collection ACI Kubernetes CNI Plugin Integration for Red Hat OpenShift ACI and Kubernetes Solution Overview ACI and Kubernetes Architecture and Design Guide ACI and Kubernetes Integration Guide","title":" Documentation"},{"location":"sections/section_2/#insights","text":"We spent plenty of time watching the videos and reading the documentation in this guide although we spent most of our time going through the hands-on learning exercises over, and over, and over again. The practice made a big difference in our ability to retain so many details. Forcing ourselves to type our way through the Jupyter Lab exercises was really hard and was also our best teacher. The Cisco DevNet learning labs for ACI were a great starting point for us and set the tone for the things we needed to learn and practice. Following those up with the Jupyter and MIT exercises was very beneficial. The star resource to practice just about any skills related to ACI is the DevNet Always-On ACI Sandbox . This is a publicly-accessible (no-VPN required), reservationless, read/write, read/write ACI simulator and we used it excessively. All of the code samples, Jupyter Notebooks, and Ansible Playbooks bundled in this repository use this sandbox. Caution From time to time, the DevNet Always-On ACI Sandbox can be a bit slow or fail to respond to your API call, browser session, etc. Generally, after a minute or two, we found the sandbox would recover from these situations. tips Spend plenty of time working with ACI both programmatically and in the APIC GUI. The ACI visore tool provides a great way to understand relationships between ACI objects in the MIT. The ACI API Inspector vastly simplifies the process to construct REST payloads for ACI. We recommend that you spend plenty of time observing how you can use APIC GUI interactions, via the API Inspector, to construct REST payloads within Python.","title":" Insights"},{"location":"sections/section_2/#on-to-section-30","text":"Great job getting through ACI! Let's keep going, click this link to check out Section 2.0 exam topics and resources.","title":"On to Section 3.0"},{"location":"sections/section_3/","text":"Data Center Device-Centric Networking \u00b6 Overview \u00b6 //TODO Section 3.0 Topic Details 3.1 Describe Day 0 provisioning with NX-OS 3.1.a Cisco POAP 3.1.b NX-OS iPXE 3.2 Implement On-Box Programmability and Automation with NX-OS 3.2.a Bash 3.2.b Linux containers (LXC and Docker using provided container 3.2.c NX-OS guest shell 3.2.d Embedded Event Manager (EEM) 3.2.e On-box Python Scripting 3.3 Compare model-driven telemetry such as YANG Push and gRPC to traditional network monitoring strategies such as SMNP, Netflow, and SYSLOG 3.4 Construct Python script that consumes model-driven telemetry data with NX-OS 3.5 Implement Off-Box Programmability and Automation with NX-OS 3.5.a Nexus NX-API (NX-API REST and NX-API CLI) 3.5.b Nexus NETCONF using native and OpenConfig 3.5.c Network configuration tools with NX-OS (Ansible)","title":"Data Center Device-Centric Networking"},{"location":"sections/section_3/#data-center-device-centric-networking","text":"","title":"Data Center Device-Centric Networking"},{"location":"sections/section_3/#overview","text":"//TODO Section 3.0 Topic Details 3.1 Describe Day 0 provisioning with NX-OS 3.1.a Cisco POAP 3.1.b NX-OS iPXE 3.2 Implement On-Box Programmability and Automation with NX-OS 3.2.a Bash 3.2.b Linux containers (LXC and Docker using provided container 3.2.c NX-OS guest shell 3.2.d Embedded Event Manager (EEM) 3.2.e On-box Python Scripting 3.3 Compare model-driven telemetry such as YANG Push and gRPC to traditional network monitoring strategies such as SMNP, Netflow, and SYSLOG 3.4 Construct Python script that consumes model-driven telemetry data with NX-OS 3.5 Implement Off-Box Programmability and Automation with NX-OS 3.5.a Nexus NX-API (NX-API REST and NX-API CLI) 3.5.b Nexus NETCONF using native and OpenConfig 3.5.c Network configuration tools with NX-OS (Ansible)","title":"Overview"},{"location":"sections/section_4/","text":"Data Center Compute \u00b6 Overview \u00b6 //TODO Section 4.0 Topic Details 4.1 Configure Cisco UCS with developer tools 4.1.a UCS PowerTool 4.1.b UCS Python SDK 4.1.c Ansible 4.2 Describe the capabilities of the DCNM API 4.3 Identify the steps in the Intersight API authentication method 4.4 Construct an Intersight API call given documentation to accomplish tasks such as manage server policies, service profiles, and firmware updates 4.5 Describe the process to implement workflows for physical and virtual infrastructure using UCS Director 4.5.a Pre-defined tasks 4.5.b Custom tasks 4.5.c Script libraries 4.6 Utilize UCS Director REST API browser","title":"Data Center Compute"},{"location":"sections/section_4/#data-center-compute","text":"","title":"Data Center Compute"},{"location":"sections/section_4/#overview","text":"//TODO Section 4.0 Topic Details 4.1 Configure Cisco UCS with developer tools 4.1.a UCS PowerTool 4.1.b UCS Python SDK 4.1.c Ansible 4.2 Describe the capabilities of the DCNM API 4.3 Identify the steps in the Intersight API authentication method 4.4 Construct an Intersight API call given documentation to accomplish tasks such as manage server policies, service profiles, and firmware updates 4.5 Describe the process to implement workflows for physical and virtual infrastructure using UCS Director 4.5.a Pre-defined tasks 4.5.b Custom tasks 4.5.c Script libraries 4.6 Utilize UCS Director REST API browser","title":"Overview"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cisco DCAUTO Exam Study Resources About We have a lot of people to thank for helping us pass the Cisco DCAUTO exam. Many of those people we have never met and, likely, will never meet, in-person or otherwise. Each of these people took time from their lives to publish something they know or built so the rest of us, somehow, via some search engine, could have even a slightly more simple path to whatever it is we want to learn. To everyone who took the time to help the entire DevNet community, this guide is a both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view. It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people that follow. We wish you success in your climb. Overview This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam. All of the information in this guide is a curation of study resources which the authors used in order to study for and pass the Cisco DCAUTO exam. Attention All all content in this guide strictly comply with the Cisco Certification and Confidentiality Agreement , also known as the Cisco Certification Non-Disclosure Agreement ( NDA ). We welcome and appreciate any Cisco NDA-compliant contributions from the community. Info This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet. All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates. Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind. Exam Topics The Cisco DCAUTO exam topics cover a variety of skills. Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.) while others are product-agnostic, foundational infrastructure automation and programmibility skills (Git, Python, Ansible, etc.). This is the fourth DevNet exam that we've studied for yet the first for which we struggled to find a curated set of resources to study from. As we amassed notes, links, and our own code snippets, we organized everything into categories that correspond to the four sections in the Exam Topics list. As such, we organized everything we have to share into sections which correspond to those same sections, so there is no ambiguity about how to find the resources that you need. Getting Started For us, liftoff is the hardest part of the study process. Getting our computers setup in a way which allows us to study and takes notes seems to take way more time than we think it will. To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible. We think the best way to study for the DCAUTO exam is to have a great development environment so we packaged one right into the GitHub repository which supports this site. The study material contend doesn't change whether you choose to use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment. These are the tools that we recommend to get started with your DCAUTO exam study: An account registration with Cisco DevNet . Tip If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account. A Windows or macOS computer with the following software installed : Docker Desktop . Git SCM from Git-SCM or from a Windows or macOS package manager. Visual Studio Code . Cisco AnyConnect or OpenConnect VPN client. A desktop hypervisor ( Parallels , VirtualBox , VMware Fusion , or VMware Workstation Player ). Tip A desktop hypervisor is optional. We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms. Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.). Tip In our exmaples, we use either the Visual Studio Code Integrated Terminal or the macOS Terminal application . Topic Navigation Tip Click to expand any topic. Development Environment Setup Visual Studio Code Dev Container Section 1.0 - Network Programmability Foundation Section 1.0 - Network Programmability Foundation Section 1.1 Section 1.2 Section 1.3 Section 1.4 Section 1.5 Section 1.6 Section 2.0 - Controller Based Data Center Networking Section 2.0 - Controller Based Data Center Networking Section 2.1 Section 2.2 Section 2.3 Section 2.4 Section 2.5 Section 2.6 Section 3.0 - Data Center Device-Centric Networking Section 3.0 - Data Center Device-Centric Networking Section 3.1 Section 3.2 Section 3.3 Section 3.4 Section 3.5 Section 4.0 - Data Center Compute Section 4.0 - Data Center Compute Section 4.1 Section 4.2 Section 4.3 Section 4.4 Section 4.5 Section 4.6 Appendecies Appendecies Appendix A - Lessons Learned Let's Do This You can do this and you're already to get started! Click this link to setup your development environment.","title":"Home"},{"location":"#cisco-dcauto-exam-study-resources","text":"","title":"Cisco DCAUTO Exam Study Resources"},{"location":"#about","text":"We have a lot of people to thank for helping us pass the Cisco DCAUTO exam. Many of those people we have never met and, likely, will never meet, in-person or otherwise. Each of these people took time from their lives to publish something they know or built so the rest of us, somehow, via some search engine, could have even a slightly more simple path to whatever it is we want to learn. To everyone who took the time to help the entire DevNet community, this guide is a both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view. It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people that follow. We wish you success in your climb.","title":"About"},{"location":"#overview","text":"This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam. All of the information in this guide is a curation of study resources which the authors used in order to study for and pass the Cisco DCAUTO exam. Attention All all content in this guide strictly comply with the Cisco Certification and Confidentiality Agreement , also known as the Cisco Certification Non-Disclosure Agreement ( NDA ). We welcome and appreciate any Cisco NDA-compliant contributions from the community. Info This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet. All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates. Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind.","title":"Overview"},{"location":"#exam-topics","text":"The Cisco DCAUTO exam topics cover a variety of skills. Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.) while others are product-agnostic, foundational infrastructure automation and programmibility skills (Git, Python, Ansible, etc.). This is the fourth DevNet exam that we've studied for yet the first for which we struggled to find a curated set of resources to study from. As we amassed notes, links, and our own code snippets, we organized everything into categories that correspond to the four sections in the Exam Topics list. As such, we organized everything we have to share into sections which correspond to those same sections, so there is no ambiguity about how to find the resources that you need.","title":"Exam Topics"},{"location":"#getting-started","text":"For us, liftoff is the hardest part of the study process. Getting our computers setup in a way which allows us to study and takes notes seems to take way more time than we think it will. To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible. We think the best way to study for the DCAUTO exam is to have a great development environment so we packaged one right into the GitHub repository which supports this site. The study material contend doesn't change whether you choose to use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment. These are the tools that we recommend to get started with your DCAUTO exam study: An account registration with Cisco DevNet . Tip If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account. A Windows or macOS computer with the following software installed : Docker Desktop . Git SCM from Git-SCM or from a Windows or macOS package manager. Visual Studio Code . Cisco AnyConnect or OpenConnect VPN client. A desktop hypervisor ( Parallels , VirtualBox , VMware Fusion , or VMware Workstation Player ). Tip A desktop hypervisor is optional. We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms. Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.). Tip In our exmaples, we use either the Visual Studio Code Integrated Terminal or the macOS Terminal application .","title":"Getting Started"},{"location":"#topic-navigation","text":"Tip Click to expand any topic. Development Environment Setup Visual Studio Code Dev Container Section 1.0 - Network Programmability Foundation Section 1.0 - Network Programmability Foundation Section 1.1 Section 1.2 Section 1.3 Section 1.4 Section 1.5 Section 1.6 Section 2.0 - Controller Based Data Center Networking Section 2.0 - Controller Based Data Center Networking Section 2.1 Section 2.2 Section 2.3 Section 2.4 Section 2.5 Section 2.6 Section 3.0 - Data Center Device-Centric Networking Section 3.0 - Data Center Device-Centric Networking Section 3.1 Section 3.2 Section 3.3 Section 3.4 Section 3.5 Section 4.0 - Data Center Compute Section 4.0 - Data Center Compute Section 4.1 Section 4.2 Section 4.3 Section 4.4 Section 4.5 Section 4.6 Appendecies Appendecies Appendix A - Lessons Learned","title":"Topic Navigation"},{"location":"#lets-do-this","text":"You can do this and you're already to get started! Click this link to setup your development environment.","title":"Let's Do This"},{"location":"sections/section_0/","text":"Development Environment Setup Overview Our development environment uses the Development Container feature in Visual Studio Code. The reasons we use this particular environment are: Portability: this development environment will work in the same way on any computer that has Visual Studio Code and Docker installed. Accessibility: the development environment is part of the Git repository which supports this guide so simply cloning the repository means you have all of the files you need. Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study. Dev Environment Setup The setup process is 4 steps: Tip Click to expand any step. 1. Install Desktop Software Choose a Windows or macOS computer Install Docker Desktop Install Git SCM Install Visual Studio Code Install Cisco AnyConnect or OpenConnect VPN *Optional - Install a Desktop Hypervisor ( recommendations ) 2. Clone the DCAUTO Study Resources Git Repository Open the Visual Studio Code Integrated Terminal Navigate to the directory where you will clone the Git repository. Enter the following command: # Clone the repository git clone https://github.com/wwt/dcauto-study-resources.git 3. Setup Visual Studio Code Start Docker Desktop Launch Visual Studio Code Install the Visual Studio Code Remote Development Extension Copy the following extension name to your clipboard: ms-vscode-remote.vscode-remote-extensionpack 4. Start the Development Container Open the cloned Git repository folder in a new window Activate the Development Container Start Studying Let's Do This You can do this and you're already to get started! Click this link to setup your development environment.","title":"Visual Studio Code Dev Container"},{"location":"sections/section_0/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"sections/section_0/#overview","text":"Our development environment uses the Development Container feature in Visual Studio Code. The reasons we use this particular environment are: Portability: this development environment will work in the same way on any computer that has Visual Studio Code and Docker installed. Accessibility: the development environment is part of the Git repository which supports this guide so simply cloning the repository means you have all of the files you need. Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study.","title":"Overview"},{"location":"sections/section_0/#dev-environment-setup","text":"The setup process is 4 steps: Tip Click to expand any step. 1. Install Desktop Software Choose a Windows or macOS computer Install Docker Desktop Install Git SCM Install Visual Studio Code Install Cisco AnyConnect or OpenConnect VPN *Optional - Install a Desktop Hypervisor ( recommendations ) 2. Clone the DCAUTO Study Resources Git Repository Open the Visual Studio Code Integrated Terminal Navigate to the directory where you will clone the Git repository. Enter the following command: # Clone the repository git clone https://github.com/wwt/dcauto-study-resources.git 3. Setup Visual Studio Code Start Docker Desktop Launch Visual Studio Code Install the Visual Studio Code Remote Development Extension Copy the following extension name to your clipboard: ms-vscode-remote.vscode-remote-extensionpack 4. Start the Development Container Open the cloned Git repository folder in a new window Activate the Development Container Start Studying","title":"Dev Environment Setup"},{"location":"sections/section_0/#lets-do-this","text":"You can do this and you're already to get started! Click this link to setup your development environment.","title":"Let's Do This"}]}
{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cisco DCAUTO Exam Study Resources About We have a lot of people to thank for helping us pass the Cisco DCAUTO exam. Many of those people we have never met and, likely, will never meet, in-person or otherwise. Each of these people took time from their lives to publish something they know or built so the rest of us, somehow, via some search engine, could have even a slightly more simple path to whatever it is we want to learn. To everyone who took the time to help the entire DevNet community, this guide is a both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view. It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people that follow. We wish you success in your climb. Overview This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam. All of the information in this guide is a curation of study resources which the authors used in order to study for and pass the Cisco DCAUTO exam. Attention All all content in this guide strictly comply with the Cisco Certification and Confidentiality Agreement , also known as the Cisco Certification Non-Disclosure Agreement ( NDA ). We welcome and appreciate any Cisco NDA-compliant contributions from the community. Info This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet. All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates. Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind. Exam Topics The Cisco DCAUTO exam topics cover a variety of skills. Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.) while others are product-agnostic, foundational infrastructure automation and programmibility skills (Git, Python, Ansible, etc.). This is the fourth DevNet exam that we've studied for yet the first for which we struggled to find a curated set of resources to study from. As we amassed notes, links, and our own code snippets, we organized everything into categories that correspond to the four sections in the Exam Topics list. As such, we organized everything we have to share into sections which correspond to those same sections, so there is no ambiguity about how to find the resources that you need. Getting Started For us, liftoff is the hardest part of the study process. Getting our computers setup in a way which allows us to study and takes notes seems to take way more time than we think it will. To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible. We think the best way to study for the DCAUTO exam is to have a great development environment so we packaged one right into the GitHub repository which supports this site. The study material content doesn't change whether you choose to use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment. These are the tools that we recommend to get started with your DCAUTO exam study: An account registration with Cisco DevNet . Tip If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account. A Windows or macOS computer with the following software installed : Docker Desktop . Git SCM from Git-SCM or from a Windows or macOS package manager. Visual Studio Code . Cisco AnyConnect or OpenConnect VPN client. A desktop hypervisor ( Parallels , VirtualBox , VMware Fusion , or VMware Workstation Player ). Tip A desktop hypervisor is optional. We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms. Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.). Tip In our exmaples, we use either the Visual Studio Code Integrated Terminal or the macOS Terminal application . Topic Navigation Tip Click to expand any topic. Development Environment Setup Visual Studio Code Dev Container Section 1.0 - Network Programmability Foundation Section 1.0 - Network Programmability Foundation Section 1.1 Section 1.2 Section 1.3 Section 1.4 Section 1.5 Section 1.6 Section 2.0 - Controller Based Data Center Networking Section 2.0 - Controller Based Data Center Networking Section 2.1 Section 2.2 Section 2.3 Section 2.4 Section 2.5 Section 2.6 Section 3.0 - Data Center Device-Centric Networking Section 3.0 - Data Center Device-Centric Networking Section 3.1 Section 3.2 Section 3.3 Section 3.4 Section 3.5 Section 4.0 - Data Center Compute Section 4.0 - Data Center Compute Section 4.1 Section 4.2 Section 4.3 Section 4.4 Section 4.5 Section 4.6 Appendecies Appendecies Appendix A - Lessons Learned Let's Do This You're already to get started! Click this link to setup your development environment.","title":"Home"},{"location":"#cisco-dcauto-exam-study-resources","text":"","title":"Cisco DCAUTO Exam Study Resources"},{"location":"#about","text":"We have a lot of people to thank for helping us pass the Cisco DCAUTO exam. Many of those people we have never met and, likely, will never meet, in-person or otherwise. Each of these people took time from their lives to publish something they know or built so the rest of us, somehow, via some search engine, could have even a slightly more simple path to whatever it is we want to learn. To everyone who took the time to help the entire DevNet community, this guide is a both nod of appreciation to you and also our way of paying it forward to the next person or people who, like us, feel like climbing to the top of the mountain, however strenuous, is worth the view. It would be disingenuous for us to make the climb using the ropes people left for us without leaving our own ropes to help the people that follow. We wish you success in your climb.","title":"About"},{"location":"#overview","text":"This guide provides content and references which will help you study and prepare yourself for the Cisco 300-635 DCAUTO Exam: Automating and Programming Cisco Data Center Solutions exam. All of the information in this guide is a curation of study resources which the authors used in order to study for and pass the Cisco DCAUTO exam. Attention All all content in this guide strictly comply with the Cisco Certification and Confidentiality Agreement , also known as the Cisco Certification Non-Disclosure Agreement ( NDA ). We welcome and appreciate any Cisco NDA-compliant contributions from the community. Info This guide is neither affiliated with Cisco Systems, Inc. nor any of its affiliates, including Cisco DevNet. All materials in this guide are contributions from the community of Cisco DevNet enthusiasts and certification candidates. Any references to pay-for-use study materials are free of sponsorship, affiliations, royalties, and payments of any kind.","title":"Overview"},{"location":"#exam-topics","text":"The Cisco DCAUTO exam topics cover a variety of skills. Some of those skills are specific to Cisco products and solutions (ACI, Nexus, Intersight, etc.) while others are product-agnostic, foundational infrastructure automation and programmibility skills (Git, Python, Ansible, etc.). This is the fourth DevNet exam that we've studied for yet the first for which we struggled to find a curated set of resources to study from. As we amassed notes, links, and our own code snippets, we organized everything into categories that correspond to the four sections in the Exam Topics list. As such, we organized everything we have to share into sections which correspond to those same sections, so there is no ambiguity about how to find the resources that you need.","title":"Exam Topics"},{"location":"#getting-started","text":"For us, liftoff is the hardest part of the study process. Getting our computers setup in a way which allows us to study and takes notes seems to take way more time than we think it will. To make that process easier for you, we tried to make the study resources in this guide as portable and consumable as possible. We think the best way to study for the DCAUTO exam is to have a great development environment so we packaged one right into the GitHub repository which supports this site. The study material content doesn't change whether you choose to use our development environment, use the files in the GitHub repository to build a development environment from source, or use your own development environment. These are the tools that we recommend to get started with your DCAUTO exam study: An account registration with Cisco DevNet . Tip If possible, we recommend you register with and log on to Cisco DevNet with a Cisco.com account because the DevNet labs for Cisco Intersight require a Cisco.com account. A Windows or macOS computer with the following software installed : Docker Desktop . Git SCM from Git-SCM or from a Windows or macOS package manager. Visual Studio Code . Cisco AnyConnect or OpenConnect VPN client. A desktop hypervisor ( Parallels , VirtualBox , VMware Fusion , or VMware Workstation Player ). Tip A desktop hypervisor is optional. We found value/ease in using a desktop hypervisor to run local instances of the Cisco UCS Platform Emulator although DevNet provides labs with sufficient access to UCS platforms. Your favorite terminal/shell program (iTerm, PowerShell, Bash, etc.). Tip In our exmaples, we use either the Visual Studio Code Integrated Terminal or the macOS Terminal application .","title":"Getting Started"},{"location":"#topic-navigation","text":"Tip Click to expand any topic. Development Environment Setup Visual Studio Code Dev Container Section 1.0 - Network Programmability Foundation Section 1.0 - Network Programmability Foundation Section 1.1 Section 1.2 Section 1.3 Section 1.4 Section 1.5 Section 1.6 Section 2.0 - Controller Based Data Center Networking Section 2.0 - Controller Based Data Center Networking Section 2.1 Section 2.2 Section 2.3 Section 2.4 Section 2.5 Section 2.6 Section 3.0 - Data Center Device-Centric Networking Section 3.0 - Data Center Device-Centric Networking Section 3.1 Section 3.2 Section 3.3 Section 3.4 Section 3.5 Section 4.0 - Data Center Compute Section 4.0 - Data Center Compute Section 4.1 Section 4.2 Section 4.3 Section 4.4 Section 4.5 Section 4.6 Appendecies Appendecies Appendix A - Lessons Learned","title":"Topic Navigation"},{"location":"#lets-do-this","text":"You're already to get started! Click this link to setup your development environment.","title":"Let's Do This"},{"location":"sections/section_0/","text":"Development Environment Setup Overview In case you're wondering, \" Why do I need a development environment? I'm studying for an exam, right? \" In our opinion, this is an exam for operations developers and a developer needs the right tools in order to do their job well. Because the exam topics cover so many subjects, the array of tools, software packages, etc. is big enough that putting together an effective development environment, even if only for exam study, takes a lot of time. We want you to save that time and help you get into the study materials as quickly as possible. VS Code Dev Container Our development environment uses the Development Container feature in Visual Studio Code. The reasons we use this particular environment are: Consistency: this development environment will work in the same way on any computer that has Visual Studio Code and Docker installed. Portability: the development environment is part of the Git repository which supports this guide so simply cloning the repository means you have all of the files you need. Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study. Development Environment Contents Reference Local web servers MkDocs at http://localhost:8000 - for offline documentation access. Jupyter Lab at http://localhost:8888 - for Python code walkthroughs. Container OS packages Git - to work with local or remote repositories. Core Python packages ipython - enhanced interactive Python shell. ncclient - NETCONF client for Python. pyyaml - YAML data encoding and decoding for Python. requests - Simple HTTP API interactions in Python. xmltodict - XML Data encoding and decoding for Python. Python linting tools ansible-lint - Lint YAML files for Ansible. autopep8 - Automatic Python PEP 8 style formating. flake8 - Lint Python files for PEP8 compliance. yamllint - Lint YAML files. Product-specific SDKs and tools Ansible - Automation tool for exam topic products. Cisco ACI Python SDK (Cobra) - simplified Python interaction for Cisco ACI. Cisco gNMI Python package - gNMI client for Python. Cisco UCS Manager Python SDK - simplified Python interaction for Cisco UCS Manager. Product-specific Ansible Collections Cisco ACI Ansible Collection Cisco Intersight Ansible Collection Cisco NX-OS (Nexus) Ansible Collection Cisco UCS Ansible Collection Microsoft PowerShell development environment PowerShell for Linux Cisco UCS PowerTool on PowerShell Gallery Source/credit for PowerShell launch script Dev Environment Setup The setup process takes a little bit of work on the first pass. Afterwards, the setup and teardown is quick and easy. Here are the high-level steps to setup the development environment: Tip Click to expand each step. 1. Install Desktop Software Choose a Windows or macOS computer Install Docker Desktop Install Git SCM Install Visual Studio Code Install Cisco AnyConnect or OpenConnect VPN *Optional - Install a Desktop Hypervisor ( recommendations ) 2. Clone the DCAUTO Study Resources Git Repository Open the Visual Studio Code Integrated Terminal Navigate to the directory where you will clone the Git repository. Enter the following command: # Clone the repository git clone https://github.com/wwt/dcauto-study-resources.git 3. Setup Visual Studio Code Start Docker Desktop Launch Visual Studio Code Install the Visual Studio Code Remote Development Extension 3a. Copy the Remote Development Bundle extension name to your clipboard: ms-vscode-remote.vscode-remote-extensionpack 3b. Install the Visual Studio Code Remote Development Bundle: 3c. Verify the Remote Development Bundle installation: 3d. Reopen the current workspace in a Visual Studio Code Development Container: 4. Observe Development Container Activation Wait for Development Container Activation 1a. Click \"show log\" to monitor container activation: 1b. Observe the development container build process: Attention The initial development container build may take 5-10 minutes, please be patient. Subsequent launches should only take a few seconds. Verify Development Container Activation 2a. Observe the repository files reappear and the log message scrolling stop: 5. Use the Development Environment Open the \"resources\" Folder 1a. Study materials, code samples, references, etc. are here: Use the Visual Studio Code Integrated Terminal 2a. Use the terminal controls pallete to open new shells: 2b. Use terminal tabs to switch between or close any open terminals: 6. Teardown and Re-Launch Teardown the Development Environment 1a. Close the Dev Container, Without Deleting the Dev Environment Image: Re-Launch the Development Environment 2a. Quickly Restart the Dev Container From the Welcome Screen: Now You're Ready Your development environment is ready to go and that means it's time to get to the exam topics. Click this link to check out the Section 1 of the exam topics.","title":"Visual Studio Code Dev Container"},{"location":"sections/section_0/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"sections/section_0/#overview","text":"In case you're wondering, \" Why do I need a development environment? I'm studying for an exam, right? \" In our opinion, this is an exam for operations developers and a developer needs the right tools in order to do their job well. Because the exam topics cover so many subjects, the array of tools, software packages, etc. is big enough that putting together an effective development environment, even if only for exam study, takes a lot of time. We want you to save that time and help you get into the study materials as quickly as possible.","title":"Overview"},{"location":"sections/section_0/#vs-code-dev-container","text":"Our development environment uses the Development Container feature in Visual Studio Code. The reasons we use this particular environment are: Consistency: this development environment will work in the same way on any computer that has Visual Studio Code and Docker installed. Portability: the development environment is part of the Git repository which supports this guide so simply cloning the repository means you have all of the files you need. Ease of Use: Getting started with your studies quickly and the ability to easily pick up your studies where you left off means less time spent fussing with a development environment and more time available to focus on exam topic study. Development Environment Contents Reference Local web servers MkDocs at http://localhost:8000 - for offline documentation access. Jupyter Lab at http://localhost:8888 - for Python code walkthroughs. Container OS packages Git - to work with local or remote repositories. Core Python packages ipython - enhanced interactive Python shell. ncclient - NETCONF client for Python. pyyaml - YAML data encoding and decoding for Python. requests - Simple HTTP API interactions in Python. xmltodict - XML Data encoding and decoding for Python. Python linting tools ansible-lint - Lint YAML files for Ansible. autopep8 - Automatic Python PEP 8 style formating. flake8 - Lint Python files for PEP8 compliance. yamllint - Lint YAML files. Product-specific SDKs and tools Ansible - Automation tool for exam topic products. Cisco ACI Python SDK (Cobra) - simplified Python interaction for Cisco ACI. Cisco gNMI Python package - gNMI client for Python. Cisco UCS Manager Python SDK - simplified Python interaction for Cisco UCS Manager. Product-specific Ansible Collections Cisco ACI Ansible Collection Cisco Intersight Ansible Collection Cisco NX-OS (Nexus) Ansible Collection Cisco UCS Ansible Collection Microsoft PowerShell development environment PowerShell for Linux Cisco UCS PowerTool on PowerShell Gallery Source/credit for PowerShell launch script","title":"VS Code Dev Container"},{"location":"sections/section_0/#dev-environment-setup","text":"The setup process takes a little bit of work on the first pass. Afterwards, the setup and teardown is quick and easy. Here are the high-level steps to setup the development environment: Tip Click to expand each step. 1. Install Desktop Software Choose a Windows or macOS computer Install Docker Desktop Install Git SCM Install Visual Studio Code Install Cisco AnyConnect or OpenConnect VPN *Optional - Install a Desktop Hypervisor ( recommendations ) 2. Clone the DCAUTO Study Resources Git Repository Open the Visual Studio Code Integrated Terminal Navigate to the directory where you will clone the Git repository. Enter the following command: # Clone the repository git clone https://github.com/wwt/dcauto-study-resources.git 3. Setup Visual Studio Code Start Docker Desktop Launch Visual Studio Code Install the Visual Studio Code Remote Development Extension 3a. Copy the Remote Development Bundle extension name to your clipboard: ms-vscode-remote.vscode-remote-extensionpack 3b. Install the Visual Studio Code Remote Development Bundle: 3c. Verify the Remote Development Bundle installation: 3d. Reopen the current workspace in a Visual Studio Code Development Container: 4. Observe Development Container Activation Wait for Development Container Activation 1a. Click \"show log\" to monitor container activation: 1b. Observe the development container build process: Attention The initial development container build may take 5-10 minutes, please be patient. Subsequent launches should only take a few seconds. Verify Development Container Activation 2a. Observe the repository files reappear and the log message scrolling stop: 5. Use the Development Environment Open the \"resources\" Folder 1a. Study materials, code samples, references, etc. are here: Use the Visual Studio Code Integrated Terminal 2a. Use the terminal controls pallete to open new shells: 2b. Use terminal tabs to switch between or close any open terminals: 6. Teardown and Re-Launch Teardown the Development Environment 1a. Close the Dev Container, Without Deleting the Dev Environment Image: Re-Launch the Development Environment 2a. Quickly Restart the Dev Container From the Welcome Screen:","title":"Dev Environment Setup"},{"location":"sections/section_0/#now-youre-ready","text":"Your development environment is ready to go and that means it's time to get to the exam topics. Click this link to check out the Section 1 of the exam topics.","title":"Now You're Ready"}]}